<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Aufgabenmodelle_Budget_Tracker_App.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Aufgabenmodelle_Budget_Tracker_App.md" />
              <option name="updatedContent" value="# Aufgabenmodelle für Budget-Tracker-App&#10;## Usability-Test Szenarien&#10;&#10;---&#10;&#10;## **1. Aufgabe: Erste Ausgabe erfassen**&#10;&#10;**Benutzergruppe:** Neue App-Nutzer / Erstanwender&#10;&#10;**Voraussetzung:** &#10;- App ist installiert und geöffnet&#10;- Budget wurde bereits eingestellt (Standard: 1000€)&#10;&#10;**Nachbedingung:** &#10;- Eine Ausgabe wurde erfolgreich gespeichert&#10;- Ausgabe erscheint im Dashboard unter &quot;Letzte Ausgaben&quot;&#10;- Budget-Kreisdiagramm zeigt die neue Ausgabe an&#10;&#10;**Hauptaufgabe:** Die erste Ausgabe in der App dokumentieren&#10;&#10;**Teilaufgaben:**&#10;1. Auf &quot;Hinzufügen&quot;-Tab (+ Icon) in der Bottom-Navigation tippen&#10;2. Betrag (z.B. &quot;25,50&quot;) in das Eingabefeld eingeben&#10;3. Passende Kategorie aus Dropdown-Menü auswählen&#10;4. Datum bestätigen oder über Kalender-Icon ändern&#10;5. Optional: Notiz hinzufügen (z.B. &quot;Mittagessen&quot;)&#10;6. &quot;Ausgabe hinzufügen&quot;-Button drücken&#10;7. Zurück zum Dashboard wechseln und Änderung im Kreisdiagramm prüfen&#10;&#10;**Bewertungskriterien:**&#10;- Zeit bis zur erfolgreichen Eingabe&#10;- Anzahl der Fehler/Zurück-Navigationen&#10;- Verständlichkeit der UI-Elemente&#10;&#10;---&#10;&#10;## **2. Aufgabe: Schnelle Kategorieerfassung**&#10;&#10;**Benutzergruppe:** Regelmäßige Nutzer / Berufstätige&#10;&#10;**Voraussetzung:** &#10;- Nutzer steht im Supermarkt/Restaurant&#10;- Möchte schnell eine Ausgabe erfassen&#10;- App ist geöffnet&#10;&#10;**Nachbedingung:** &#10;- Einkauf wurde mit wenigen Klicks als &quot;Essen&quot;-Ausgabe erfasst&#10;- Ausgabe ist korrekt kategorisiert&#10;&#10;**Hauptaufgabe:** Ausgabe mit Schnellauswahl-Funktion kategorisieren&#10;&#10;**Teilaufgaben:**&#10;1. App öffnen und zu &quot;Hinzufügen&quot; navigieren&#10;2. Betrag eingeben (z.B. &quot;18,90&quot;)&#10;3. &quot;️ Essen&quot; aus der Schnellauswahl-Sektion antippen&#10;4. Ausgabe mit einem Klick auf &quot;Ausgabe hinzufügen&quot; speichern&#10;5. Erfolgsmeldung oder Rückkehr zum Dashboard beobachten&#10;&#10;**Bewertungskriterien:**&#10;- Geschwindigkeit der Eingabe&#10;- Erkennung der Schnellauswahl-Funktion&#10;- Zufriedenheit mit dem Workflow&#10;&#10;---&#10;&#10;## **3. Aufgabe: Monatsübersicht kontrollieren**&#10;&#10;**Benutzergruppe:** Budget-bewusste Nutzer&#10;&#10;**Voraussetzung:** &#10;- Mehrere Ausgaben wurden bereits erfasst&#10;- Nutzer möchte finanzielle Lage überprüfen&#10;&#10;**Nachbedingung:** &#10;- Nutzer hat Überblick über aktuellen Budget-Status&#10;- Kann einschätzen, wie viel Budget noch verfügbar ist&#10;&#10;**Hauptaufgabe:** Aktuelle Finanzlage überprüfen und verstehen&#10;&#10;**Teilaufgaben:**&#10;1. Dashboard öffnen (erste Tab - Haus-Icon)&#10;2. Kreisdiagramm mit Budget-Fortschritt interpretieren&#10;3. Farbkodierung verstehen (Grün = OK, Orange = Warnung, Rot = Überschreitung)&#10;4. &quot;Verfügbar&quot; vs. &quot;Ausgegeben&quot; Info-Karten vergleichen&#10;5. Liste der letzten 5 Ausgaben durchsehen&#10;6. Bei Bedarf zu detaillierter Ausgabenliste wechseln&#10;&#10;**Bewertungskriterien:**&#10;- Verständlichkeit der Visualisierung&#10;- Korrekte Interpretation der Budgetlage&#10;- Intuitive Navigation zwischen den Ansichten&#10;&#10;---&#10;&#10;## **4. Aufgabe: Ausgaben nach Kategorie filtern**&#10;&#10;**Benutzergruppe:** Analytische Nutzer / Sparer&#10;&#10;**Voraussetzung:** &#10;- Verschiedene Ausgaben in unterschiedlichen Kategorien wurden erfasst&#10;- Nutzer möchte Transport-Kosten analysieren&#10;&#10;**Nachbedingung:** &#10;- Nur Transport-Ausgaben werden angezeigt&#10;- Nutzer kann Gesamtbetrag für diese Kategorie ablesen&#10;&#10;**Hauptaufgabe:** Ausgaben einer bestimmten Kategorie (Transport) analysieren&#10;&#10;**Teilaufgaben:**&#10;1. Zu &quot;Ausgaben&quot;-Tab (Listen-Icon) navigieren&#10;2. Filter-Chips in der oberen Sektion finden&#10;3. &quot; Transport&quot; Filter-Chip antippen&#10;4. Gefilterte Liste mit nur Transport-Ausgaben durchsehen&#10;5. Gesamtbetrag in der Zusammenfassungs-Karte beachten&#10;6. &quot;Alle&quot; Filter antippen, um Filter zurückzusetzen&#10;&#10;**Bewertungskriterien:**&#10;- Auffindbarkeit der Filter-Funktion&#10;- Verständlichkeit der Filter-Chips&#10;- Klarheit der gefilterten Darstellung&#10;&#10;---&#10;&#10;## **5. Aufgabe: Budget anpassen und Dark Mode aktivieren**&#10;&#10;**Benutzergruppe:** Nutzer mit geänderten Lebensumständen&#10;&#10;**Voraussetzung:** &#10;- Standard-Budget (1000€) ist zu niedrig angesetzt&#10;- Nutzer bevorzugt dunkles Design für Abendnutzung&#10;&#10;**Nachbedingung:** &#10;- Budget wurde auf gewünschten Wert (z.B. 1500€) erhöht&#10;- Dark Mode ist aktiviert&#10;- Neue Budgetwerte sind im Dashboard sichtbar&#10;&#10;**Hauptaufgabe:** Persönliche App-Einstellungen optimieren&#10;&#10;**Teilaufgaben:**&#10;1. Zu &quot;Einstellungen&quot;-Tab (⚙️) wechseln&#10;2. Neues Monatsbudget in das Eingabefeld eingeben (z.B. &quot;1500&quot;)&#10;3. &quot;Budget speichern&quot; Button drücken&#10;4. Dark Mode Toggle-Switch aktivieren&#10;5. Zurück zum Dashboard navigieren&#10;6. Neue Budgetwerte und dunkles Theme verifizieren&#10;&#10;**Bewertungskriterien:**&#10;- Auffindbarkeit der Einstellungen&#10;- Verständlichkeit der Eingabefelder&#10;- Sofortige Anwendung der Änderungen&#10;&#10;---&#10;&#10;## **6. Aufgabe: Budgetüberschreitung erkennen und reagieren**&#10;&#10;**Benutzergruppe:** Nutzer mit Ausgabenproblemen&#10;&#10;**Voraussetzung:** &#10;- Ausgaben haben das festgelegte Monatsbudget überschritten&#10;- Kreisdiagramm zeigt &gt;100% an (rot)&#10;&#10;**Nachbedingung:** &#10;- Nutzer hat Überschreitung erkannt&#10;- Größte Ausgabenposten wurden identifiziert&#10;- Maßnahme wurde eingeleitet (Budget erhöhen oder Ausgaben reduzieren)&#10;&#10;**Hauptaufgabe:** Auf Budgetüberschreitung reagieren und Lösung finden&#10;&#10;**Teilaufgaben:**&#10;1. Dashboard öffnen&#10;2. Rotes Kreisdiagramm und negative &quot;Verfügbar&quot;-Anzeige erkennen&#10;3. Warnsignale in der Visualisierung verstehen&#10;4. Zu &quot;Ausgaben&quot;-Liste wechseln&#10;5. Ausgaben nach Betrag sortieren/analysieren&#10;6. Größte Ausgabenposten identifizieren&#10;7. **Option A:** Zu Einstellungen wechseln und Budget realistisch erhöhen&#10;8. **Option B:** Ausgabenverhalten für Rest des Monats anpassen&#10;&#10;**Bewertungskriterien:**&#10;- Erkennung der Problemsituation&#10;- Verständnis der visuellen Warnsignale&#10;- Fähigkeit zur Problemlösung durch die App&#10;&#10;---&#10;&#10;## **Zusätzliche Testszenarien**&#10;&#10;### **7. Aufgabe: Ausgabe löschen (Korrektur)**&#10;&#10;**Benutzergruppe:** Nutzer nach Eingabefehler&#10;&#10;**Hauptaufgabe:** Fälschlicherweise eingetragene Ausgabe entfernen&#10;&#10;**Teilaufgaben:**&#10;1. Zu &quot;Ausgaben&quot;-Liste navigieren&#10;2. Fehlerhafte Ausgabe in der Liste finden&#10;3. Papierkorb-Icon neben der Ausgabe antippen&#10;4. Löschbestätigung im Dialog bestätigen&#10;5. Aktualisierung in Dashboard und Liste prüfen&#10;&#10;### **8. Aufgabe: App-Navigation verstehen**&#10;&#10;**Benutzergruppe:** Neue Nutzer&#10;&#10;**Hauptaufgabe:** Alle vier Hauptbereiche der App erkunden&#10;&#10;**Teilaufgaben:**&#10;1. Dashboard () - Budget-Übersicht verstehen&#10;2. Hinzufügen (➕) - Ausgabe-Eingabe ausprobieren&#10;3. Ausgaben () - Liste und Filter testen&#10;4. Einstellungen (⚙️) - Personalisierungsoptionen entdecken&#10;&#10;---&#10;&#10;## **Metriken für Usability-Evaluation**&#10;&#10;### **Quantitative Metriken:**&#10;- **Task Completion Rate:** Prozentsatz erfolgreich abgeschlossener Aufgaben&#10;- **Time on Task:** Durchschnittliche Zeit pro Aufgabe&#10;- **Error Rate:** Anzahl Fehler/Irrwege pro Aufgabe&#10;- **Efficiency:** Anzahl Klicks/Schritte bis zum Ziel&#10;&#10;### **Qualitative Metriken:**&#10;- **Satisfaction Score:** Zufriedenheit auf Skala 1-10&#10;- **Perceived Difficulty:** Subjektive Schwierigkeit der Aufgaben&#10;- **Navigation Confidence:** Sicherheit beim Navigieren&#10;- **Feature Discovery:** Welche Funktionen werden gefunden?&#10;&#10;### **Spezifische UI-Elemente testen:**&#10;- **Kreisdiagramm:** Verständlichkeit der Budget-Visualisierung&#10;- **Bottom Navigation:** Intuitivität der Tab-Navigation&#10;- **Filter-Chips:** Auffindbarkeit und Bedienung&#10;- **Schnellauswahl:** Effizienz der Kategorie-Buttons&#10;- **Dark Mode:** Sichtbarkeit und Präferenz&#10;&#10;---&#10;&#10;**Erstellt für:** Budget-Tracker Android App (Material Design 3)&#10;**Zielgruppe:** Usability-Test mit 6-10 Probanden&#10;**Testdauer:** Ca. 45-60 Minuten pro Teilnehmer&#10;**Datum:** August 2025" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Ist_Szenarien_Budget_Tracker_App.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Ist_Szenarien_Budget_Tracker_App.md" />
              <option name="updatedContent" value="# Ist-Szenarien für Budget-Tracker-App&#10;## Realistische Nutzungsszenarien für Usability-Tests&#10;&#10;---&#10;&#10;###  **Ist-Szenario – Lisa Weber (sparsame Berufseinsteigerin)**&#10;&#10;- **Welche Rolle nehmen Sie ein?**&#10;    &#10;    Ich bin eine 26-jährige Marketing-Managerin, die gerade anfängt, ihre Finanzen systematisch zu verwalten. Ich will endlich sparen können für meine erste eigene Wohnung.&#10;    &#10;- **Welche Geräte nutzen Sie?**&#10;    &#10;    Ich verwende hauptsächlich mein iPhone 14, manchmal auch das MacBook für größere Übersichten.&#10;    &#10;- **Wie ist die Nutzungssituation?**&#10;    &#10;    Ich nutze die App meistens direkt nach einem Einkauf – beim Verlassen des Supermarkts, nach dem Kaffee-Kauf oder abends beim Entspannen zu Hause. Ich will schnell und unkompliziert eingeben können.&#10;    &#10;- **Was sind Ihre typischen Aufgaben?**&#10;    1. App nach spontanen Käufen öffnen (Kaffee, Snacks, Online-Shopping)&#10;    2. Betrag schnell eingeben und Kategorie auswählen&#10;    3. Am Wochenende Dashboard checken: &quot;Wie viel habe ich diese Woche ausgegeben?&quot;&#10;    4. Bei Budgetüberschreitung erschrecken und versuchen zu verstehen, wofür das Geld weg ist&#10;    5. Einstellungen anpassen, wenn sich Einkommen ändert&#10;&#10;---&#10;&#10;### ‍‍‍ **Ist-Szenario – Michael Schmidt (Familienvater)**&#10;&#10;- **Welche Rolle nehmen Sie ein?**&#10;    &#10;    Ich bin 38 Jahre alt, verheiratet mit zwei Kindern. Als Teamleiter trage ich die Hauptverantwortung für das Familieneinkommen und möchte unsere Ausgaben besser strukturieren.&#10;    &#10;- **Welche Geräte nutzen Sie?**&#10;    &#10;    Ich nutze mein Samsung Galaxy-Smartphone und gelegentlich das Tablet am Küchentisch für größere Übersichten.&#10;    &#10;- **Wie ist die Nutzungssituation?**&#10;    &#10;    Ich verwende die App hauptsächlich samstags beim Wocheneinkauf, an der Tankstelle oder wenn größere Ausgaben für die Kinder anfallen. Abends schaue ich oft das Budget durch, während meine Frau und ich über Finanzen sprechen.&#10;    &#10;- **Was sind Ihre typischen Aufgaben?**&#10;    1. Wocheneinkauf erfassen: großer Betrag, Kategorie &quot;Essen&quot;&#10;    2. Tankkosten und Kinderaktivitäten (Schwimmkurs, Musikschule) eintragen&#10;    3. Ende des Monats: Ausgaben nach Kategorien filtern und analysieren&#10;    4. Budget für nächsten Monat anpassen, wenn sich Ausgaben ändern&#10;    5. Screenshots vom Dashboard machen, um sie meiner Frau zu zeigen&#10;&#10;---&#10;&#10;###  **Ist-Szenario – Tom Müller (technikaffiner Student)**&#10;&#10;- **Welche Rolle nehmen Sie ein?**&#10;    &#10;    Ich bin 22, studiere Informatik und muss mit 800€ im Monat auskommen. Jeder Euro zählt, daher tracke ich alles penibel und will die App voll ausnutzen.&#10;    &#10;- **Welche Geräte nutzen Sie?**&#10;    &#10;    Ich wechsle zwischen iPhone und Android-Testgerät, verwende die App auch am Laptop über Emulator. Ich teste gerne neue Apps und Features.&#10;    &#10;- **Wie ist die Nutzungssituation?**&#10;    &#10;    Ich nutze die App täglich – in der Mensa, an der Uni, beim Online-Shopping zu Hause. Ich führe detaillierte Listen und experimentiere mit allen Funktionen. Ich will Muster in meinen Ausgaben erkennen.&#10;    &#10;- **Was sind Ihre typischen Aufgaben?**&#10;    1. Jeden Mensa-Besuch (4,20€), jeden Kaffee (1,50€) sofort eingeben&#10;    2. Monatsticket und Streaming-Abos als große Posten erfassen&#10;    3. Wöchentlich: Ausgaben nach Kategorien filtern und analysieren&#10;    4. Dark Mode aktivieren (nutze oft abends die App)&#10;    5. Budgetlimit sehr knapp setzen und schauen, wie früh im Monat es erreicht wird&#10;    6. Screenshots machen für eigene Excel-Analysen&#10;&#10;---&#10;&#10;### ‍ **Ist-Szenario – Ingrid Hoffmann (Rentnerin)**&#10;&#10;- **Welche Rolle nehmen Sie ein?**&#10;    &#10;    Ich bin 67 Jahre alt, pensionierte Lehrerin mit fester Rente. Ich will meine gewohnten Ausgaben digital erfassen, aber ohne Stress und komplizierte Technik.&#10;    &#10;- **Welche Geräte nutzen Sie?**&#10;    &#10;    Ich verwende mein Android-Smartphone mit extra großer Schrift. Mein Enkel hat mir die App installiert und erklärt.&#10;    &#10;- **Wie ist die Nutzungssituation?**&#10;    &#10;    Ich nutze die App zu Hause am Küchentisch nach meinem wöchentlichen Einkauf am Samstag. Auch nach Apotheken- oder Café-Besuchen trage ich die Ausgaben ein – aber in Ruhe, nicht hektisch unterwegs.&#10;    &#10;- **Was sind Ihre typischen Aufgaben?**&#10;    1. Samstags nach dem Wocheneinkauf: große Summe für &quot;Essen&quot; eintragen&#10;    2. Apotheken-Ausgaben und Geschenke für Enkel erfassen&#10;    3. Am Monatsende schauen: &quot;Komme ich mit meiner Rente aus?&quot;&#10;    4. Bei Unklarheiten meinen Enkel fragen oder die App erstmal schließen&#10;    5. Schrift vergrößern, wenn sie zu klein wird&#10;&#10;---&#10;&#10;### ‍♀️ **Ist-Szenario – Sarah Kim (vielbeschäftigte Selbstständige)**&#10;&#10;- **Welche Rolle nehmen Sie ein?**&#10;    &#10;    Ich bin 31, arbeite als freiberufliche Grafikdesignerin mit schwankenden Einkünften. Ich brauche eine schnelle Lösung für Ausgaben-Tracking, da ich ständig unterwegs bin.&#10;    &#10;- **Welche Geräte nutzen Sie?**&#10;    &#10;    Hauptsächlich iPhone 15 Pro, manchmal iPad bei längeren Design-Sessions. Ich nutze viele Produktivitäts-Apps parallel.&#10;    &#10;- **Wie ist die Nutzungssituation?**&#10;    &#10;    Ich verwende die App zwischen Terminen, im Café beim Warten auf Kunden oder abends beim Aufräumen der Belege. Ich brauche schnelle Eingabe und will nicht lange nachdenken müssen. Alles muss &quot;on-the-go&quot; funktionieren.&#10;    &#10;- **Was sind Ihre typischen Aufgaben?**&#10;    1. Schnell Taxi-Fahrten, Kunden-Kaffees und Arbeits-Lunch eingeben&#10;    2. Größere Business-Ausgaben (Software, Hardware) erfassen&#10;    3. Am Monatsende: Budget erhöhen, wenn Projekt-Einnahmen gestiegen sind&#10;    4. Schnell checken: &quot;Kann ich mir diese Anschaffung leisten?&quot;&#10;    5. Dark Mode für späte Arbeitszeiten aktivieren&#10;&#10;---&#10;&#10;### ‍ **Ist-Szenario – David Hassan (internationaler Student)**&#10;&#10;- **Welche Rolle nehmen Sie ein?**&#10;    &#10;    Ich bin 24, komme aus Syrien und studiere in Deutschland. Mit 600€ Stipendium muss ich sehr sparsam leben. Jeder Euro ist kostbar.&#10;    &#10;- **Welche Geräte nutzen Sie?**&#10;    &#10;    Ich nutze ein älteres Android-Smartphone und gelegentlich Computer in der Uni-Bibliothek.&#10;    &#10;- **Wie ist die Nutzungssituation?**&#10;    &#10;    Ich verwende die App hauptsächlich beim Einkaufen im Discounter oder nach ÖPNV-Fahrten. Zu Hause am Wohnheim-Tisch plane ich meine Ausgaben für die Woche und rechne alles in syrische Lira um.&#10;    &#10;- **Was sind Ihre typischen Aufgaben?**&#10;    1. Jeden Einkauf bei Aldi/Lidl sofort eingeben (meist 5-15€)&#10;    2. ÖPNV-Ticket und Mensa-Essen erfassen&#10;    3. Wöchentlich prüfen: &quot;Reicht mein Geld bis Monatsende?&quot;&#10;    4. Budget sehr niedrig setzen (500€) und hoffen, dass es reicht&#10;    5. Bei Budgetüberschreitung: Panik und Ausgaben für Rest des Monats minimieren&#10;    6. Großen Zahlen in der App nutzen – muss sofort sehen, was ich ausgegeben habe&#10;&#10;---&#10;&#10;## **Situationsabhängige Nutzungsmuster**&#10;&#10;### **‍♂️ Mobile Nutzung (unterwegs):**&#10;- **Lisa:** Nach Kaffee-Kauf schnell eingeben&#10;- **Michael:** An der Tankstelle oder im Baumarkt  &#10;- **Tom:** In der Mensa zwischen Vorlesungen&#10;- **Sarah:** Zwischen Kundenterminen im Taxi/Café&#10;&#10;### ** Stationäre Nutzung (zu Hause):**&#10;- **Ingrid:** Am Küchentisch nach dem Wocheneinkauf&#10;- **David:** Im Wohnheim beim Wochenplanung&#10;- **Michael:** Abends mit Frau über Finanzen sprechen&#10;- **Tom:** Detaillierte Analyse am Laptop&#10;&#10;### **⏰ Zeitliche Nutzungsmuster:**&#10;- **Sofort nach Kauf:** Lisa, Tom, David&#10;- **Tagesabschluss:** Sarah, Michael  &#10;- **Wochenroutine:** Ingrid (samstags)&#10;- **Monatsende:** Alle für Budget-Checking&#10;&#10;### ** Emotionale Situationen:**&#10;- **Freude:** Tom bei erfolgreichem Sparen&#10;- **Stress:** David bei Budgetüberschreitung  &#10;- **Routine:** Michael beim Wocheneinkauf&#10;- **Neugier:** Lisa beim ersten Ausprobieren&#10;&#10;---&#10;&#10;**Erstellt für:** Budget-Tracker Android App (Material Design 3)&#10;**Verwendung:** Kontextuelle Usability-Tests mit realistischen Szenarien&#10;**Aktualisiert:** August 2025" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Nutzungsanforderungen_Budget_Tracker_App.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Nutzungsanforderungen_Budget_Tracker_App.md" />
              <option name="updatedContent" value="# Qualitative Nutzungsanforderungen für Budget-Tracker-App&#10;## System-Anforderungen basierend auf Benutzer-Erfordernissen&#10;&#10;---&#10;&#10;## Qualitative Nutzungsanforderungen&#10;&#10;###  **Sparsame Berufseinsteiger**&#10;&#10;- Der Nutzer muss am System **den &quot;Ausgabe hinzufügen&quot;-Button in der Bottom-Navigation erkennen** können.&#10;- Der Nutzer muss am System **spontane Ausgaben mit wenigen Klicks erfassen** können.&#10;- Der Nutzer muss am System **häufige Kategorien per Schnellauswahl wählen** können.&#10;&#10;---&#10;&#10;###  **Budget-bewusste Familienväter**&#10;&#10;- Der Nutzer muss am System **Ausgabenverteilung nach Kategorien einsehen** können.&#10;- Der Nutzer muss am System **Monatsausgaben filtern und analysieren** können.&#10;- Der Nutzer muss am System **Einsparpotentiale durch Kategorie-Vergleich identifizieren** können.&#10;&#10;---&#10;&#10;###  **Technikaffine Studenten**&#10;&#10;- Der Nutzer muss am System **detaillierte Ausgabenstatistiken abrufen** können.&#10;- Der Nutzer muss am System **erweiterte Filterfunktionen verwenden** können.&#10;- Der Nutzer muss am System **Dark Mode aktivieren und deaktivieren** können.&#10;&#10;---&#10;&#10;###  **Ältere Benutzer / Rentner**&#10;&#10;- Der Nutzer muss am System **große, gut lesbare Schrift erkennen** können.&#10;- Der Nutzer muss am System **wöchentliche Einkäufe einfach eingeben** können.&#10;- Der Nutzer muss am System **Budget-Status ohne komplexe Menüs ablesen** können.&#10;&#10;---&#10;&#10;###  **Vielbeschäftigte Selbstständige**&#10;&#10;- Der Nutzer muss am System **Ausgaben in unter 10 Sekunden erfassen** können.&#10;- Der Nutzer muss am System **vorausgefüllte Eingabefelder nutzen** können.&#10;- Der Nutzer muss am System **Budget-Status für Spontanentscheidungen abrufen** können.&#10;&#10;---&#10;&#10;###  **Internationale Studenten mit knappem Budget**&#10;&#10;- Der Nutzer muss am System **verbleibendes Budget in großen Zahlen erkennen** können.&#10;- Der Nutzer muss am System **Budget-Warnungen ohne Sprachbarrieren verstehen** können.&#10;- Der Nutzer muss am System **finanzielle Limits durch Farbkodierung erkennen** können.&#10;&#10;---&#10;&#10;## **Übergreifende System-Anforderungen**&#10;&#10;###  **Navigation - Alle Benutzergruppen**&#10;&#10;- Der Nutzer muss am System **zwischen allen vier Hauptbereichen wechseln** können.&#10;- Der Nutzer muss am System **seine aktuelle Position in der App erkennen** können.&#10;- Der Nutzer muss am System **ohne Verwirrung durch die Bottom-Navigation navigieren** können.&#10;&#10;---&#10;&#10;###  **Budgetkontrolle - Alle Benutzergruppen**&#10;&#10;- Der Nutzer muss am System **Budget-Verbrauch im Kreisdiagramm ablesen** können.&#10;- Der Nutzer muss am System **Farbkodierung (Grün/Orange/Rot) interpretieren** können.&#10;- Der Nutzer muss am System **verbleibendes Monatsbudget sofort erkennen** können.&#10;&#10;---&#10;&#10;### ⚡ **Schnelle Eingabe - Alle Benutzergruppen**&#10;&#10;- Der Nutzer muss am System **obligatorische Eingabefelder identifizieren** können.&#10;- Der Nutzer muss am System **vorausgefüllte Standardwerte verwenden** können.&#10;- Der Nutzer muss am System **erfolgreiche Eingabe durch Feedback bestätigen** können.&#10;&#10;---&#10;&#10;###  **Ausgabenanalyse - Alle Benutzergruppen**&#10;&#10;- Der Nutzer muss am System **Ausgabenhistorie chronologisch einsehen** können.&#10;- Der Nutzer muss am System **Ausgaben nach Kategorien filtern** können.&#10;- Der Nutzer muss am System **fehlerhafte Ausgaben identifizieren und löschen** können.&#10;&#10;---&#10;&#10;### ⚙️ **Personalisierung - Alle Benutzergruppen**&#10;&#10;- Der Nutzer muss am System **Monatsbudget anpassen und speichern** können.&#10;- Der Nutzer muss am System **Währung auswählen und ändern** können.&#10;- Der Nutzer muss am System **Einstellungsänderungen durch visuelles Feedback bestätigen** können.&#10;&#10;---&#10;&#10;## **Funktionale System-Anforderungen**&#10;&#10;###  **Eingabe-System**&#10;&#10;- Das System muss **Dezimaleingaben für Beträge verarbeiten** können.&#10;- Das System muss **Datumseingabe über Kalender-Widget ermöglichen**.&#10;- Das System muss **Kategorie-Auswahl per Dropdown und Schnellauswahl bereitstellen**.&#10;- Das System muss **optionale Notiz-Eingaben speichern** können.&#10;&#10;###  **Visualisierungs-System**&#10;&#10;- Das System muss **Kreisdiagramm für Budget-Fortschritt rendern** können.&#10;- Das System muss **Farbwechsel basierend auf Budget-Prozentsätzen implementieren**.&#10;- Das System muss **responsive Cards für Ausgaben-Übersicht generieren**.&#10;- Das System muss **Emoji-Icons für Kategorien korrekt anzeigen**.&#10;&#10;###  **Filter-System**&#10;&#10;- Das System muss **Ausgaben nach Kategorien gruppieren** können.&#10;- Das System muss **Ausgaben nach Datumsbereich filtern** können.&#10;- Das System muss **Filter-Chips mit aktivem Zustand anzeigen**.&#10;- Das System muss **Gesamtsummen für gefilterte Ansichten berechnen**.&#10;&#10;###  **Datenpersistenz-System**&#10;&#10;- Das System muss **Ausgaben lokal auf dem Gerät speichern**.&#10;- Das System muss **Einstellungen über App-Neustarts hinweg bewahren**.&#10;- Das System muss **Löschvorgänge mit Bestätigungsdialogen absichern**.&#10;- Das System muss **Dark Mode Präferenz dauerhaft speichern**.&#10;&#10;###  **Navigation-System**&#10;&#10;- Das System muss **Bottom-Navigation mit vier Tabs bereitstellen**.&#10;- Das System muss **aktiven Tab visuell hervorheben**.&#10;- Das System muss **flüssige Übergänge zwischen Screens gewährleisten**.&#10;- Das System muss **Zurück-Navigation ohne Datenverlust handhaben**.&#10;&#10;---&#10;&#10;## **Non-Funktionale Anforderungen**&#10;&#10;###  **Performance**&#10;&#10;- Das System muss **Ausgaben-Eingabe in unter 3 Sekunden verarbeiten**.&#10;- Das System muss **Dashboard-Rendering in unter 2 Sekunden abschließen**.&#10;- Das System muss **Filter-Operationen in unter 1 Sekunde ausführen**.&#10;&#10;###  **Usability**&#10;&#10;- Das System muss **mindestens 16sp Schriftgröße für Haupttexte verwenden**.&#10;- Das System muss **Touch-Targets von mindestens 48dp Größe bereitstellen**.&#10;- Das System muss **Kontrast-Verhältnisse von mindestens 4.5:1 einhalten**.&#10;&#10;###  **Kompatibilität**&#10;&#10;- Das System muss **auf Android API Level 30+ funktionieren**.&#10;- Das System muss **verschiedene Bildschirmgrößen (320dp - 600dp) unterstützen**.&#10;- Das System muss **Hochformat und Querformat handhaben**.&#10;&#10;###  **Design**&#10;&#10;- Das System muss **Material Design 3 Guidelines befolgen**.&#10;- Das System muss **konsistente Farbpalette über alle Screens verwenden**.&#10;- Das System muss **Dark Mode mit angemessenen Kontrast-Verhältnissen implementieren**.&#10;&#10;---&#10;&#10;**Erstellt für:** Budget-Tracker Android App (Material Design 3)&#10;**Verwendung:** System-Design und Entwicklungsrichtlinien&#10;**Basierend auf:** Soll-Szenarien und Benutzer-Erfordernissen&#10;**Aktualisiert:** August 2025" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Personas_Budget_Tracker_App.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Personas_Budget_Tracker_App.md" />
              <option name="updatedContent" value="# Personas für Budget-Tracker-App&#10;## Zielgruppen-Profile für Usability-Tests&#10;&#10;---&#10;&#10;###  **Persona 1: Lisa Weber – Die sparsame Berufseinsteigerin**&#10;&#10;- **Alter:** 26&#10;- **Beruf:** Junior Marketing Managerin in einem Startup&#10;- **Einkommen:** 2.800€ netto/Monat&#10;- **Ziele:** Geld für erste eigene Wohnung sparen, Ausgaben unter Kontrolle behalten, finanzielle Disziplin entwickeln&#10;- **Frustrationen:** Verliert schnell den Überblick über kleine Ausgaben, komplizierte Finanz-Apps mit zu vielen Features&#10;- **Typische Aktivitäten:** Kauft oft spontan Kaffee/Snacks, nutzt kontaktloses Bezahlen, checkt Banking-Apps regelmäßig&#10;- **Technologieaffinität:** Hoch – ist Digital Native, erwartet intuitive Apps und sofortige Synchronisation&#10;- **Budget-Verhalten:** Führt bisher keine systematische Budgetplanung, möchte einfachen Einstieg&#10;- **Smartphone-Nutzung:** 4-5 Stunden täglich, hauptsächlich iOS, nutzt viele Apps parallel&#10;&#10;**Zitat:** *&quot;Ich will einfach nur wissen, wofür ich mein Geld ausgebe, ohne einen Wirtschaftsstudium dafür zu brauchen!&quot;*&#10;&#10;---&#10;&#10;### ‍‍‍ **Persona 2: Michael Schmidt – Der Familienvater**&#10;&#10;- **Alter:** 38  &#10;- **Beruf:** Teamleiter im Maschinenbau&#10;- **Einkommen:** 4.200€ netto/Monat&#10;- **Familie:** Verheiratet, 2 Kinder (8 und 12 Jahre)&#10;- **Ziele:** Familieneinkommen optimieren, Ausgaben für Kinder im Blick behalten, für Urlaub sparen&#10;- **Frustrationen:** Chaos bei Familienausgaben, Partner nutzt andere Apps, keine gemeinsame Übersicht&#10;- **Typische Aktivitäten:** Wocheneinkauf, Tankstelle, Kinderaktivitäten bezahlen, größere Anschaffungen planen&#10;- **Technologieaffinität:** Mittel – nutzt hauptsächlich WhatsApp und Banking-Apps, mag einfache Lösungen&#10;- **Budget-Verhalten:** Verwendet Excel-Tabellen, sucht nach praktischerer Lösung&#10;- **Smartphone-Nutzung:** 2-3 Stunden täglich, Android, pragmatisch orientiert&#10;&#10;**Zitat:** *&quot;Ich brauche eine App, die auch meine Frau versteht und die uns beiden zeigt, wo unser Geld hingeht.&quot;*&#10;&#10;---&#10;&#10;###  **Persona 3: Tom Müller – Der technikaffine Student**&#10;&#10;- **Alter:** 22&#10;- **Beruf:** Informatikstudent im 5. Semester  &#10;- **Einkommen:** 800€/Monat (BAföG + Nebenjob)&#10;- **Ziele:** Mit wenig Geld auskommen, jeden Euro zweimal umdrehen, Daten analysieren und optimieren&#10;- **Frustrationen:** Fehlende Export-Funktionen, keine Statistiken, Apps ohne Customization-Optionen&#10;- **Typische Aktivitäten:** Mensa-Essen, öffentliche Verkehrsmittel, Online-Shopping, Gaming, Streaming-Abos&#10;- **Technologieaffinität:** Sehr hoch – probiert neue Apps aus, möchte alle Features nutzen, achtet auf UI/UX&#10;- **Budget-Verhalten:** Führt bereits detaillierte Listen, sucht nach automatisierten Lösungen&#10;- **Smartphone-Nutzung:** 6-8 Stunden täglich, wechselt zwischen iOS und Android, Early Adopter&#10;&#10;**Zitat:** *&quot;Die App muss mir nicht nur zeigen was ich ausgebe, sondern auch warum und wie ich es besser machen kann!&quot;*&#10;&#10;---&#10;&#10;### ‍ **Persona 4: Ingrid Hoffmann – Die Rentnerin mit fester Routine**&#10;&#10;- **Alter:** 67&#10;- **Beruf:** Pensionierte Grundschullehrerin&#10;- **Einkommen:** 1.600€ Rente/Monat&#10;- **Ziele:** Mit fester Rente auskommen, Ausgaben für Enkel budgetieren, keine bösen Überraschungen&#10;- **Frustrationen:** Zu kleine Schrift, zu viele Klicks nötig, unverständliche Technik-Begriffe&#10;- **Typische Aktivitäten:** Wocheneinkauf am Samstag, Apotheke, Geschenke für Enkel, Café-Besuche&#10;- **Technologieaffinität:** Niedrig – nutzt Smartphone hauptsächlich für Telefon und WhatsApp&#10;- **Budget-Verhalten:** Führt handschriftliche Haushaltsbücher seit 40 Jahren&#10;- **Smartphone-Nutzung:** 1 Stunde täglich, Android mit großer Schrift, braucht klare Anweisungen&#10;&#10;**Zitat:** *&quot;Ich möchte eine App, die so einfach ist wie mein Haushaltsbuch, aber moderner.&quot;*&#10;&#10;---&#10;&#10;### ‍♀️ **Persona 5: Sarah Kim – Die vielbeschäftigte Selbstständige**&#10;&#10;- **Alter:** 31&#10;- **Beruf:** Freiberufliche Grafikdesignerin&#10;- **Einkommen:** Schwankend, 2.000-5.000€/Monat  &#10;- **Ziele:** Unregelmäßige Einkünfte verwalten, Geschäfts- und Privatausgaben trennen, Steuern vorbereiten&#10;- **Frustrationen:** Keine Zeit für aufwendige Eingaben, Apps die nicht mit anderen Tools synchronisieren&#10;- **Typische Aktivitäten:** Arbeitet viel unterwegs, spontane Client-Meetings, Online-Tools für Business&#10;- **Technologieaffinität:** Sehr hoch – nutzt professionelle Software, erwartet nahtlose Integration&#10;- **Budget-Verhalten:** Chaotisch, sammelt Belege in Schuhkartons, sucht nach automatischen Lösungen  &#10;- **Smartphone-Nutzung:** 5-6 Stunden täglich, iOS, multitasking-orientiert, nutzt Shortcuts&#10;&#10;**Zitat:** *&quot;Ich brauche eine App, die im Hintergrund arbeitet und mir nur meldet, wenn ich über Budget bin!&quot;*&#10;&#10;---&#10;&#10;### ‍ **Persona 6: David Hassan – Der internationale Austauschstudent**&#10;&#10;- **Alter:** 24&#10;- **Beruf:** Masterstudent (Austausch aus Syrien)&#10;- **Einkommen:** 600€/Monat (Stipendium)&#10;- **Ziele:** Mit sehr wenig Geld in Deutschland überleben, Währungsumrechnung verstehen, Geld nach Hause senden&#10;- **Frustrationen:** Apps nur auf Deutsch, komplizierte Menüs, keine Mehrwährungsunterstützung&#10;- **Typische Aktivitäten:** Discount-Einkäufe, öffentliche Verkehrsmittel, kostenlose Freizeitaktivitäten&#10;- **Technologieaffinität:** Hoch – nutzt viele Apps für Navigation und Übersetzung&#10;- **Budget-Verhalten:** Sehr sparsam, rechnet alle Ausgaben in Heimatwährung um&#10;- **Smartphone-Nutzung:** 4-5 Stunden täglich, Android, benötigt mehrsprachige Unterstützung&#10;&#10;**Zitat:** *&quot;Eine einfache App mit großen Zahlen - ich muss sofort sehen, ob ich mir etwas leisten kann!&quot;*&#10;&#10;---&#10;&#10;## **Persona-Mapping zu Aufgabenmodellen**&#10;&#10;### **Primäre Zielgruppen für Tests:**&#10;- **Lisa (Berufseinsteigerin)** → Aufgaben 1, 2, 3 (Grundfunktionen)&#10;- **Michael (Familienvater)** → Aufgaben 3, 4, 5 (Analyse und Einstellungen)  &#10;- **Tom (Student)** → Aufgaben 4, 6, 7, 8 (Erweiterte Features)&#10;&#10;### **Sekundäre Zielgruppen:**&#10;- **Ingrid (Rentnerin)** → Aufgaben 1, 3 (Einfachheit und Verständlichkeit)&#10;- **Sarah (Selbstständige)** → Aufgaben 2, 6 (Effizienz und Schnelligkeit)&#10;- **David (Austauschstudent)** → Aufgaben 1, 3, 6 (Grundlagen und Budgetkontrolle)&#10;&#10;## **Design-Implikationen**&#10;&#10;### **Für Lisa (Digital Native):**&#10;- Moderne, Instagram-ähnliche UI&#10;- Swipe-Gesten unterstützen&#10;- Push-Benachrichtigungen für Budgetlimits&#10;&#10;### **Für Michael (Pragmatiker):**&#10;- Große, klare Buttons&#10;- Familien-Sharing-Features&#10;- Export für Excel/PDF&#10;&#10;### **Für Tom (Power User):**&#10;- Detaillierte Statistiken&#10;- Customization-Optionen&#10;- Keyboard-Shortcuts&#10;&#10;### **Für Ingrid (Senior):**&#10;- Große Schrift (min. 16sp)&#10;- Hoher Kontrast&#10;- Wenige, klare Menüpunkte&#10;&#10;### **Für Sarah (Business):**&#10;- Quick-Add Widget&#10;- Spracheingabe&#10;- Cloud-Sync&#10;&#10;### **Für David (International):**&#10;- Mehrsprachigkeit&#10;- Währungsumrechnung&#10;- Offline-Funktionalität&#10;&#10;---&#10;&#10;**Erstellt für:** Budget-Tracker Android App (Material Design 3)&#10;**Verwendung:** Persona-basierte Usability-Tests und Design-Entscheidungen&#10;**Aktualisiert:** August 2025" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Soll_Szenarien_Budget_Tracker_App.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Soll_Szenarien_Budget_Tracker_App.md" />
              <option name="updatedContent" value="# Soll-Szenarien für Budget-Tracker-App&#10;## Benutzeranforderungen nach Information-Ressource-Kompetenz Modell&#10;&#10;---&#10;&#10;###  **Sparsame Berufseinsteiger (Lisa)**&#10;&#10;- **Information:**&#10;    &#10;    Sparsame Berufseinsteiger müssen **wissen**, wo sich der &quot;Ausgabe hinzufügen&quot;-Button befindet, um **spontane Käufe sofort erfassen** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Sparsame Berufseinsteiger müssen **eine intuitive Schnellauswahl für häufige Kategorien verfügbar haben**, um **ohne langes Suchen kategorisieren** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Sparsame Berufseinsteiger müssen **einschätzen können**, ob sie ihr Wochenbudget überschreiten, um **rechtzeitig Ausgaben reduzieren** zu können.&#10;&#10;---&#10;&#10;###  **Budget-bewusste Familienvater (Michael)**&#10;&#10;- **Information:**&#10;    &#10;    Budget-bewusste Familienväter müssen **wissen**, wie sich die Ausgaben nach Kategorien aufteilen, um **Einsparpotentiale identifizieren** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Budget-bewusste Familienväter müssen **eine übersichtliche Monatsanalyse mit Filterfunktionen verfügbar haben**, um **Familienausgaben systematisch auswerten** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Budget-bewusste Familienväter müssen **einschätzen können**, welche Ausgabenkategorien das Budget am stärksten belasten, um **gezielt Kosten optimieren** zu können.&#10;&#10;---&#10;&#10;###  **Technikaffine Studenten (Tom)**&#10;&#10;- **Information:**&#10;    &#10;    Technikaffine Studenten müssen **wissen**, wie sie detaillierte Ausgabenstatistiken abrufen, um **Verhaltensmuster analysieren** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Technikaffine Studenten müssen **erweiterte Filtermöglichkeiten und Dark Mode verfügbar haben**, um **präzise Datenanalysen durchführen** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Technikaffine Studenten müssen **einschätzen können**, ob ihr knapp kalkuliertes Budget bis Monatsende reicht, um **proaktiv Ausgaben anpassen** zu können.&#10;&#10;---&#10;&#10;###  **Ältere Benutzer / Rentner (Ingrid)**&#10;&#10;- **Information:**&#10;    &#10;    Ältere Benutzer müssen **wissen**, wie sie ihre wöchentlichen Einkäufe eintragen, um **ihre gewohnten Ausgaben digital erfassen** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Ältere Benutzer müssen **große, gut lesbare Schrift und einfache Menüs verfügbar haben**, um **ohne Stress bedienen** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Ältere Benutzer müssen **einschätzen können**, ob sie mit ihrer festen Rente auskommen, um **finanzielle Sicherheit bewahren** zu können.&#10;&#10;---&#10;&#10;###  **Vielbeschäftigte Selbstständige (Sarah)**&#10;&#10;- **Information:**&#10;    &#10;    Vielbeschäftigte Selbstständige müssen **wissen**, wie sie Ausgaben in Sekundenschnelle erfassen, um **zwischen Terminen effizient arbeiten** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Vielbeschäftigte Selbstständige müssen **Schnelleingabe-Funktionen und automatische Synchronisation verfügbar haben**, um **unterwegs nahtlos dokumentieren** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Vielbeschäftigte Selbstständige müssen **einschätzen können**, ob aktuelle Projekteinnahmen eine geplante Anschaffung rechtfertigen, um **spontane Geschäftsentscheidungen treffen** zu können.&#10;&#10;---&#10;&#10;###  **Internationale Studenten mit knappem Budget (David)**&#10;&#10;- **Information:**&#10;    &#10;    Internationale Studenten müssen **wissen**, wie viel Budget sie noch zur Verfügung haben, um **mit sehr wenig Geld bis Monatsende auszukommen** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Internationale Studenten müssen **große, klare Zahlenanzeigen und einfache Navigation verfügbar haben**, um **auch bei Sprachbarrieren verstehen** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Internationale Studenten müssen **einschätzen können**, wann sie ihr Limit erreichen, um **finanzielle Notlagen vermeiden** zu können.&#10;&#10;---&#10;&#10;## **Übergreifende Benutzeranforderungen**&#10;&#10;###  **Alle Benutzergruppen - Navigation**&#10;&#10;- **Information:**&#10;    &#10;    Alle Benutzer müssen **wissen**, wie sie zwischen Dashboard, Eingabe, Liste und Einstellungen wechseln, um **alle App-Funktionen erreichen** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Alle Benutzer müssen **eine konsistente Bottom-Navigation verfügbar haben**, um **intuitiv durch die App navigieren** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Alle Benutzer müssen **einschätzen können**, wo sie sich gerade in der App befinden, um **zielgerichtet ihre Aufgaben erledigen** zu können.&#10;&#10;---&#10;&#10;###  **Alle Benutzergruppen - Budgetkontrolle**&#10;&#10;- **Information:**&#10;    &#10;    Alle Benutzer müssen **wissen**, wie viel von ihrem Monatsbudget bereits verbraucht wurde, um **ihre finanzielle Lage einschätzen** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Alle Benutzer müssen **eine visuelle Budgetanzeige (Kreisdiagramm) verfügbar haben**, um **auf einen Blick den Status erkennen** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Alle Benutzer müssen **einschätzen können**, ob die Farbkodierung (Grün/Orange/Rot) eine Warnung bedeutet, um **rechtzeitig reagieren** zu können.&#10;&#10;---&#10;&#10;### ⚡ **Alle Benutzergruppen - Schnelle Eingabe**&#10;&#10;- **Information:**&#10;    &#10;    Alle Benutzer müssen **wissen**, welche Eingabefelder obligatorisch sind, um **vollständige Ausgaben erfassen** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Alle Benutzer müssen **vorausgefüllte Standardwerte (aktuelles Datum) verfügbar haben**, um **mit minimalen Eingaben arbeiten** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Alle Benutzer müssen **einschätzen können**, ob ihre Eingabe erfolgreich war, um **Datenverlust vermeiden** zu können.&#10;&#10;---&#10;&#10;###  **Alle Benutzergruppen - Ausgabenanalyse**&#10;&#10;- **Information:**&#10;    &#10;    Alle Benutzer müssen **wissen**, wie sie ihre Ausgabenhistorie einsehen, um **vergangene Transaktionen überprüfen** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Alle Benutzer müssen **eine durchsuchbare und filterbare Ausgabenliste verfügbar haben**, um **spezifische Ausgaben schnell finden** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Alle Benutzer müssen **einschätzen können**, ob eine Ausgabe fehlerhaft eingetragen wurde, um **Korrekturen durchführen** zu können.&#10;&#10;---&#10;&#10;### ⚙️ **Alle Benutzergruppen - Personalisierung**&#10;&#10;- **Information:**&#10;    &#10;    Alle Benutzer müssen **wissen**, wo sie ihr Monatsbudget anpassen können, um **realistische Budgetvorgaben setzen** zu können.&#10;    &#10;- **Ressource:**&#10;    &#10;    Alle Benutzer müssen **einfache Einstellungsoptionen (Budget, Währung, Dark Mode) verfügbar haben**, um **die App personalisieren** zu können.&#10;    &#10;- **Kompetenz:**&#10;    &#10;    Alle Benutzer müssen **einschätzen können**, ob ihre Einstellungsänderungen gespeichert wurden, um **Vertrauen in die App-Funktionalität haben** zu können.&#10;&#10;---&#10;&#10;**Erstellt für:** Budget-Tracker Android App (Material Design 3)&#10;**Verwendung:** Requirements Engineering und User Experience Design&#10;**Modell:** Information-Ressource-Kompetenz Framework&#10;**Aktualisiert:** August 2025" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Usability_Testaufgaben_Budget_Tracker_App.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Usability_Testaufgaben_Budget_Tracker_App.md" />
              <option name="updatedContent" value="# Usability-Testaufgaben für Budget-Tracker-App&#10;## Strukturierte Aufgabensammlung für Persona-basierte Selbstevaluation&#10;&#10;---&#10;&#10;## **Grundlegende Testaufgaben (1-3) - Für alle Personas**&#10;&#10;### **Aufgabe 1: Erste Ausgabe erfassen**&#10;&#10;**Szenario:**&#10;Sie haben gerade 4,50€ für einen Kaffee bezahlt und möchten diese Ausgabe sofort in der Budget-Tracker-App erfassen.&#10;&#10;**Ziel:** &#10;Eine neue Ausgabe vollständig eingeben und speichern.&#10;&#10;**Konkrete Schritte:**&#10;1. App öffnen&#10;2. Zur Eingabe-Funktion navigieren&#10;3. Betrag &quot;4,50&quot; eingeben&#10;4. Kategorie &quot;Essen&quot; auswählen&#10;5. Aktuelles Datum bestätigen&#10;6. Ausgabe speichern&#10;7. Erfolg überprüfen (Dashboard oder Bestätigungsmeldung)&#10;&#10;**Bewertungskriterien:**&#10;- Wurde die Navigation zur Eingabe intuitiv gefunden?&#10;- War die Kategorieauswahl verständlich?&#10;- Gab es klares Feedback nach dem Speichern?&#10;&#10;**Erfolgsmessung:**&#10;- ✅ Erfolgreich: Ausgabe wurde gespeichert und ist sichtbar&#10;- ⚠️ Teilweise: Ausgabe wurde gespeichert, aber Unsicherheiten aufgetreten&#10;- ❌ Fehlgeschlagen: Ausgabe wurde nicht oder fehlerhaft gespeichert&#10;&#10;---&#10;&#10;### **Aufgabe 2: Schnelle Kategorisierung mit Schnellauswahl**&#10;&#10;**Szenario:**&#10;Sie stehen vor dem Supermarkt und haben gerade 23,80€ für Lebensmittel ausgegeben. Sie wollen dies schnell erfassen, bevor Sie weiterfahren.&#10;&#10;**Ziel:** &#10;Ausgabe mit der Schnellauswahl-Funktion in unter 30 Sekunden erfassen.&#10;&#10;**Konkrete Schritte:**&#10;1. App zur &quot;Hinzufügen&quot;-Sektion öffnen&#10;2. Betrag &quot;23,80&quot; schnell eingeben&#10;3. Schnellauswahl-Button &quot;️ Essen&quot; antippen (nicht Dropdown verwenden)&#10;4. Datum belassen (heute)&#10;5. Ausgabe mit einem Klick speichern&#10;6. App schließen oder weiternutzen&#10;&#10;**Bewertungskriterien:**&#10;- Wurden die Schnellauswahl-Buttons sofort erkannt?&#10;- War der Workflow effizienter als die Dropdown-Auswahl?&#10;- Ist die Eingabe tatsächlich unter 30 Sekunden möglich?&#10;&#10;**Erfolgsmessung:**&#10;- ✅ Erfolgreich: &lt;30 Sekunden, intuitive Bedienung&#10;- ⚠️ Teilweise: 30-60 Sekunden, kleine Verwirrungen&#10;- ❌ Fehlgeschlagen: &gt;60 Sekunden oder Schnellauswahl nicht verwendet&#10;&#10;---&#10;&#10;### **Aufgabe 3: Dashboard verstehen und Budget-Status interpretieren**&#10;&#10;**Szenario:**&#10;Sie öffnen die App am Abend und möchten wissen, wie viel Budget Sie noch für diesen Monat zur Verfügung haben.&#10;&#10;**Ziel:** &#10;Budget-Status aus dem Dashboard herauslesen und verstehen.&#10;&#10;**Konkrete Schritte:**&#10;1. Zum Dashboard navigieren (Hauptseite)&#10;2. Kreisdiagramm betrachten und interpretieren&#10;3. &quot;Verfügbar&quot; vs. &quot;Ausgegeben&quot; Werte vergleichen&#10;4. Farbkodierung verstehen (Grün/Orange/Rot)&#10;5. Aktuelle Budget-Situation in eigenen Worten beschreiben&#10;6. Entscheiden: Kann ich mir noch etwas Größeres leisten?&#10;&#10;**Bewertungskriterien:**&#10;- Ist das Kreisdiagramm ohne Erklärung verständlich?&#10;- Sind die Zahlen und Prozentangaben klar erkennbar?&#10;- Wird die Farbkodierung intuitiv verstanden?&#10;&#10;**Erfolgsmessung:**&#10;- ✅ Erfolgreich: Budget-Status sofort verstanden, korrekte Interpretation&#10;- ⚠️ Teilweise: Status verstanden, aber einzelne Elemente unklar&#10;- ❌ Fehlgeschlagen: Kreisdiagramm oder Zahlen verwirrend&#10;&#10;---&#10;&#10;## **Erweiterte Testaufgaben (4-6) - Persona-spezifisch**&#10;&#10;### **Aufgabe 4: Ausgaben nach Kategorie filtern und analysieren**&#10;&#10;**Szenario:**&#10;Ende des Monats möchten Sie herausfinden, wie viel Geld Sie für &quot;Transport&quot; ausgegeben haben, um zu sehen, ob Sie ein Monatsticket kaufen sollten.&#10;&#10;**Ziel:** &#10;Alle Transport-Ausgaben anzeigen und Gesamtsumme ermitteln.&#10;&#10;**Konkrete Schritte:**&#10;1. Zur &quot;Ausgaben&quot;-Liste navigieren&#10;2. Filter-Funktion finden&#10;3. &quot; Transport&quot; Filter aktivieren&#10;4. Gefilterte Liste durchsehen&#10;5. Gesamtbetrag für Transport ablesen&#10;6. Filter wieder deaktivieren für Vollansicht&#10;&#10;**Bewertungskriterien:**&#10;- Sind die Filter-Chips intuitiv auffindbar?&#10;- Ist der aktive Filter-Zustand klar erkennbar?&#10;- Wird die Gesamtsumme für die gefilterte Kategorie angezeigt?&#10;&#10;**Erfolgsmessung:**&#10;- ✅ Erfolgreich: Filter gefunden, verwendet, Gesamtsumme ermittelt&#10;- ⚠️ Teilweise: Filter verwendet, aber Gesamtsumme unklar&#10;- ❌ Fehlgeschlagen: Filter nicht gefunden oder nicht funktionsfähig&#10;&#10;---&#10;&#10;### **Aufgabe 5: Einstellungen anpassen (Budget und Dark Mode)**&#10;&#10;**Szenario:**&#10;Ihr Einkommen hat sich geändert und Sie möchten Ihr Monatsbudget von 1000€ auf 1200€ erhöhen. Außerdem nutzen Sie die App oft abends und wollen den Dark Mode aktivieren.&#10;&#10;**Ziel:** &#10;Budget anpassen und Dark Mode einschalten.&#10;&#10;**Konkrete Schritte:**&#10;1. Zu den Einstellungen navigieren&#10;2. Budget-Eingabefeld finden&#10;3. &quot;1200&quot; eingeben&#10;4. Budget-Änderung speichern&#10;5. Dark Mode-Toggle finden und aktivieren&#10;6. Zurück zum Dashboard - Änderungen verifizieren&#10;&#10;**Bewertungskriterien:**&#10;- Sind die Einstellungen leicht auffindbar?&#10;- Ist das Budget-Eingabefeld intuitiv?&#10;- Wird Dark Mode sofort angewandt?&#10;&#10;**Erfolgsmessung:**&#10;- ✅ Erfolgreich: Beide Einstellungen geändert, sofortige Anwendung&#10;- ⚠️ Teilweise: Einstellungen geändert, aber verzögerte Anwendung&#10;- ❌ Fehlgeschlagen: Einstellungen nicht gefunden oder nicht gespeichert&#10;&#10;---&#10;&#10;### **Aufgabe 6: Mit Budgetüberschreitung umgehen**&#10;&#10;**Szenario:**&#10;Es ist Mitte des Monats und Sie bemerken, dass Ihr Budget bereits zu 90% aufgebraucht ist. Sie müssen eine größere Ausgabe (150€ Autoreparatur) eingeben und sehen, wie die App reagiert.&#10;&#10;**Ziel:** &#10;Budgetüberschreitung erkennen und angemessen reagieren.&#10;&#10;**Konkrete Schritte:**&#10;1. Große Ausgabe eingeben: &quot;150€, Kategorie: Sonstiges&quot;&#10;2. Speichern und zum Dashboard wechseln&#10;3. Veränderte Visualisierung beobachten (rotes Kreisdiagramm?)&#10;4. &quot;Verfügbar&quot;-Betrag prüfen (negativ?)&#10;5. Reaktion bewerten: Ist die Überschreitung klar erkennbar?&#10;6. Optional: Budget in Einstellungen anpassen&#10;&#10;**Bewertungskriterien:**&#10;- Wird Budgetüberschreitung visuell deutlich signalisiert?&#10;- Sind die negativen Beträge verständlich dargestellt?&#10;- Motiviert die Darstellung zu angemessenen Reaktionen?&#10;&#10;**Erfolgsmessung:**&#10;- ✅ Erfolgreich: Überschreitung klar erkennbar, intuitive Warnsignale&#10;- ⚠️ Teilweise: Überschreitung erkennbar, aber schwache Visualisierung&#10;- ❌ Fehlgeschlagen: Überschreitung nicht oder missverständlich dargestellt&#10;&#10;---&#10;&#10;## **Persona-spezifische Zusatzaufgaben**&#10;&#10;### **Für Lisa (Berufseinsteigerin) - Aufgabe 7**&#10;**&quot;Wochenbudget-Check&quot;**&#10;&#10;**Szenario:** Es ist Donnerstag und Sie möchten wissen, ob Sie sich das geplante Wochenend-Dinner (25€) noch leisten können.&#10;&#10;**Schritte:**&#10;1. Dashboard aufrufen&#10;2. Bisherige Wochenausgaben mentell hochrechnen&#10;3. Entscheidung treffen: Dinner ja/nein?&#10;&#10;---&#10;&#10;### **Für Michael (Familienvater) - Aufgabe 7**&#10;**&quot;Familienausgaben analysieren&quot;**&#10;&#10;**Szenario:** Sie möchten Ihrer Frau zeigen, wie viel die Familie diesen Monat für Kinderaktivitäten ausgegeben hat.&#10;&#10;**Schritte:**&#10;1. Nach &quot;Unterhaltung&quot; oder ähnlicher Kategorie filtern&#10;2. Ausgaben durchgehen (Schwimmkurs, Kino, etc.)&#10;3. Screenshot für Partnerin machen&#10;&#10;---&#10;&#10;### **Für Tom (Student) - Aufgabe 7**&#10;**&quot;Power-User-Features testen&quot;**&#10;&#10;**Szenario:** Sie wollen alle erweiterten Features der App entdecken und bewerten.&#10;&#10;**Schritte:**&#10;1. Jede Funktion in jedem Tab ausprobieren&#10;2. Dark Mode aktivieren/deaktivieren&#10;3. Verschiedene Filterkombinationen testen&#10;4. Kleinste und größte mögliche Eingaben testen&#10;&#10;---&#10;&#10;### **Für Ingrid (Rentnerin) - Aufgabe 7**&#10;**&quot;Accessibility-Test&quot;**&#10;&#10;**Szenario:** Sie möchten die App mit der größten verfügbaren Schriftgröße nutzen.&#10;&#10;**Schritte:**&#10;1. Geräteschrift auf größte Einstellung stellen&#10;2. App öffnen und Lesbarkeit prüfen&#10;3. Alle wichtigen Texte und Zahlen überprüfen&#10;4. Touch-Targets (Buttons) auf Bedienbarkeit testen&#10;&#10;---&#10;&#10;### **Für Sarah (Selbstständige) - Aufgabe 7**&#10;**&quot;Effizienz-Stress-Test&quot;**&#10;&#10;**Szenario:** Sie sind zwischen zwei Terminen und haben 2 Minuten Zeit, 3 verschiedene Ausgaben einzugeben.&#10;&#10;**Schritte:**&#10;1. Timer auf 2 Minuten stellen&#10;2. Drei Ausgaben schnellstmöglich erfassen:&#10;   - Taxi: 15€&#10;   - Business-Lunch: 28€&#10;   - Büromaterial: 43€&#10;3. Erfolg messen: Alle drei in unter 2 Minuten?&#10;&#10;---&#10;&#10;### **Für David (Austauschstudent) - Aufgabe 7**&#10;**&quot;Budget-Notfall-Szenario&quot;**&#10;&#10;**Szenario:** Sie haben nur noch 50€ für die letzten 10 Tage des Monats und müssen sehr genau planen.&#10;&#10;**Schritte:**&#10;1. Aktuelles Budget prüfen&#10;2. Bisherige Ausgaben analysieren&#10;3. Entscheiden: Kann ich mir 8€ für Mensa-Essen leisten?&#10;4. Ausgabe eingeben und neue Budgetsituation bewerten&#10;&#10;---&#10;&#10;## **Bewertungsschema für alle Aufgaben**&#10;&#10;### **Quantitative Bewertung:**&#10;```&#10;| Aufgabe | Erfolgreich? | Zeit (Sek.) | Klicks | Fehler | Persona-Fit (1-5) |&#10;|---------|--------------|-------------|--------|--------|--------------------|&#10;| 1       | Ja/Nein      | XX          | XX     | XX     | X                  |&#10;| 2       | Ja/Nein      | XX          | XX     | XX     | X                  |&#10;| etc.    |              |             |        |        |                    |&#10;```&#10;&#10;### **Qualitative Bewertung:**&#10;- **Zufriedenheit:** 1-10 Skala pro Aufgabe&#10;- **Kritische Punkte:** Was würde diese Persona frustrieren?&#10;- **Positive Aspekte:** Was funktioniert besonders gut?&#10;- **Verbesserungsvorschläge:** Konkrete UI/UX-Optimierungen&#10;&#10;### **Gesamtbewertung pro Persona:**&#10;- **Grundfunktionen (1-3):** Alle erfolgreich? Ja/Nein&#10;- **Erweiterte Funktionen (4-6):** Wie viele erfolgreich? X/3&#10;- **Persona-spezifische Aufgabe (7):** Passt die App zu diesem Nutzertyp?&#10;- **SUS-Score:** Gesamtzufriedenheit 1-10&#10;&#10;---&#10;&#10;## **Testdurchführungs-Checkliste**&#10;&#10;### **Vor jeder Persona:**&#10;- [ ] Persona-Profil gründlich durchlesen&#10;- [ ] Mentall in die Rolle versetzen&#10;- [ ] Timer und Aufzeichnung vorbereiten&#10;- [ ] App in Grundzustand zurücksetzen&#10;&#10;### **Während des Tests:**&#10;- [ ] Think-Aloud: Gedanken laut aussprechen&#10;- [ ] Zeit pro Aufgabe stoppen&#10;- [ ] Klicks/Schritte zählen&#10;- [ ] Fehler und Verwirrungen notieren&#10;- [ ] Screenshots bei Problemen machen&#10;&#10;### **Nach jeder Persona:**&#10;- [ ] Sofortige Bewertung ausfüllen&#10;- [ ] Kritische Punkte dokumentieren&#10;- [ ] Persona-spezifische Erkenntnisse notieren&#10;- [ ] 5 Minuten Pause zwischen Personas&#10;&#10;---&#10;&#10;**Erstellt für:** Budget-Tracker Android App Usability-Test&#10;**Basierend auf:** 6 Personas und Aufgabenmodelle&#10;**Testdurchführung:** Karim Abdulhadi (Selbstevaluation)&#10;**Geschätzte Gesamtdauer:** 3 Stunden (20 Min. pro Persona + 30 Min. Analyse)&#10;**Datum:** 30. August 2025" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Usability_Testplan_Budget_Tracker_App.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Usability_Testplan_Budget_Tracker_App.md" />
              <option name="originalContent" value="# Usability-Testplan für Budget-Tracker-App&#10;## Methodische Evaluation der Benutzerfreundlichkeit&#10;&#10;---&#10;&#10;### **Zweck des Usability-Tests**&#10;&#10;Ziel des Tests ist es, die Benutzerfreundlichkeit der Android-App „Budget Tracker&quot; zu evaluieren. Es sollen Stärken und Schwächen hinsichtlich der Bedienbarkeit, Verständlichkeit der Budgetvisualisierung und Effizienz der Ausgabenerfassung identifiziert werden, um Verbesserungsmöglichkeiten aufzuzeigen und die Nutzererfahrung für verschiedene Finanzmanagement-Bedürfnisse zu optimieren.&#10;&#10;**Spezifische Testziele:**&#10;- Bewertung der Intuitivität des Kreisdiagramm-Dashboards&#10;- Evaluation der Effizienz der Ausgabenerfassung mit Schnellauswahl-Kategorien&#10;- Analyse der Verständlichkeit von Filter- und Analysefunktionen&#10;- Prüfung der Accessibility für verschiedene Altersgruppen&#10;- Bewertung der Dark Mode-Implementierung und Personalisierungsoptionen&#10;&#10;---&#10;&#10;### **Benutzergruppen und Teilnehmeranzahl**&#10;&#10;**Primäre Benutzergruppen:**&#10;- **Sparsame Berufseinsteiger** (Lisa-Typ): Digital Natives mit Sparbedürfnissen&#10;- **Budget-bewusste Familienväter** (Michael-Typ): Pragmatische Nutzer mit Analysebedarf&#10;- **Technikaffine Studenten** (Tom-Typ): Power-User mit knappem Budget&#10;&#10;**Sekundäre Benutzergruppen:**&#10;- **Ältere Benutzer/Rentner** (Ingrid-Typ): Accessibility-orientierte Nutzer&#10;- **Vielbeschäftigte Selbstständige** (Sarah-Typ): Effizienz-fokussierte Mobile-First-Nutzer&#10;- **Internationale Studenten** (David-Typ): Budget-kritische Nutzer mit Sprachbarrieren&#10;&#10;**Teilnehmeranzahl:** 6-8 Tester (1-2 pro Hauptbenutzergruppe) + 1 Experte (Selbstevaluation auf Grundlage der Benutzergruppenprofile)&#10;&#10;---&#10;&#10;### **Testdauer**&#10;&#10;**Ungefähre Dauer je Aufgabenszenario:** 8–12 Minuten&#10;&#10;**Einzelne Aufgabenblöcke:**&#10;- **Grundfunktionen** (Aufgaben 1-3): 25 Minuten&#10;- **Erweiterte Funktionen** (Aufgaben 4-6): 20 Minuten  &#10;- **Nachbesprechung und Feedback**: 10 Minuten&#10;&#10;**Gesamtdauer pro Teilnehmer:** ca. 55–65 Minuten&#10;&#10;**Gesamtdauer der Evaluation (alle Teilnehmer):** ca. 8-10 Stunden&#10;&#10;---&#10;&#10;### **Team**&#10;&#10;- **Testleitung und Moderation:** Karim Abdulhadi&#10;- **Protokollierung und Beobachtung:** Karim Abdulhadi (bei Einzeltests)&#10;- **Technische Unterstützung:** Karim Abdulhadi (App-Entwickler)&#10;- **Auswertung und Analyse:** Karim Abdulhadi&#10;&#10;**Rollen bei Gruppentests:**&#10;- **Hauptmoderator:** Führt durch Aufgaben, stellt Fragen&#10;- **Stiller Beobachter:** Dokumentiert Verhalten, Fehler, Zeitaufwand&#10;- **Technischer Support:** Unterstützt bei App-Problemen&#10;&#10;---&#10;&#10;### **Testmethodik**&#10;&#10;- **Art des Tests:** Moderierter Task-basierter Usability-Test mit realistischen Finanzszenarien&#10;&#10;**Dokumentationsgrundlage:**&#10;- [**Aufgabenmodelle für Budget-Tracker-App**](./Aufgabenmodelle_Budget_Tracker_App.md)&#10;- [**Personas für Budget-Tracker-App**](./Personas_Budget_Tracker_App.md)  &#10;- [**Ist-Szenarien für Budget-Tracker-App**](./Ist_Szenarien_Budget_Tracker_App.md)&#10;- [**Soll-Szenarien für Budget-Tracker-App**](./Soll_Szenarien_Budget_Tracker_App.md)&#10;- [**Nutzungsanforderungen für Budget-Tracker-App**](./Nutzungsanforderungen_Budget_Tracker_App.md)&#10;&#10;**Evaluationsmethode:** &#10;- Kombination aus strukturierten Aufgabenmodellen, persona-basierten Szenarien und qualitativen Nutzungsanforderungen&#10;- Think-Aloud-Protokoll während der Aufgabenbearbeitung&#10;- Heuristische Evaluation basierend auf Material Design 3 Guidelines&#10;&#10;**Bewertungskriterien:**&#10;&#10;**Quantitative Metriken:**&#10;- **Task Completion Rate:** Prozentsatz erfolgreich abgeschlossener Aufgaben&#10;- **Time on Task:** Durchschnittliche Zeit pro Aufgabenstellung&#10;- **Error Rate:** Anzahl Navigations-/Eingabefehler pro Aufgabe&#10;- **Efficiency Score:** Verhältnis zwischen optimaler und tatsächlicher Klick-Anzahl&#10;&#10;**Qualitative Metriken:**&#10;- **Learnability:** Wie schnell verstehen Erstnutzer die Budgetvisualisierung?&#10;- **Memorability:** Finden wiederkehrende Nutzer Funktionen wieder?&#10;- **Satisfaction:** Subjektive Zufriedenheit mit Design und Funktionalität&#10;- **Error Recovery:** Können Nutzer Fehleingaben selbstständig korrigieren?&#10;&#10;**Spezifische UI-Evaluationsbereiche:**&#10;- **Kreisdiagramm-Verständlichkeit:** Intuitive Interpretation von Budget-Fortschritt und Farbkodierung&#10;- **Bottom-Navigation-Effizienz:** Flüssigkeit der Tab-Wechsel zwischen vier Hauptbereichen&#10;- **Schnellauswahl-Usability:** Effektivität der Kategorie-Buttons vs. Dropdown-Menü&#10;- **Filter-Chip-Klarheit:** Verständlichkeit der aktiven/inaktiven Zustände&#10;- **Dark Mode-Konsistenz:** Sichtbarkeit und Kontrast in beiden Modi&#10;- **Responsive Design:** Bedienbarkeit auf verschiedenen Android-Bildschirmgrößen&#10;&#10;---&#10;&#10;### **Testszenarien und Aufgaben**&#10;&#10;**Block 1: Grundlegende Finanzverwaltung (25 Min.)**&#10;1. **Erste Ausgabe erfassen** - Neue Nutzer lernen die Grundfunktion&#10;2. **Schnelle Kategorisierung** - Mobile Nutzung mit Schnellauswahl testen  &#10;3. **Budget-Übersicht verstehen** - Dashboard-Kreisdiagramm interpretieren&#10;&#10;**Block 2: Analyse und Optimierung (20 Min.)**&#10;4. **Ausgaben filtern** - Kategoriebasierte Analyse durchführen&#10;5. **Einstellungen anpassen** - Budget und Dark Mode personalisieren&#10;6. **Budgetüberschreitung handhaben** - Problemlösungsverhalten testen&#10;&#10;**Zusätzliche Evaluationspunkte:**&#10;- Navigation zwischen allen vier Tabs (Dashboard, Hinzufügen, Ausgaben, Einstellungen)&#10;- Korrektur von Fehlern (Ausgabe löschen, falsche Beträge korrigieren)&#10;- Accessibility-Features (Schriftgröße, Kontrast, Touch-Target-Größen)&#10;&#10;---&#10;&#10;### **Testumgebung und Materialien**&#10;&#10;**Hardware:**&#10;- **Primärgeräte:** Samsung Galaxy (Android 11+), Google Pixel (Android 12+)&#10;- **Sekundärgeräte:** Älteres Android-Gerät für Accessibility-Tests&#10;- **Bildschirmgrößen:** 5,5&quot; bis 6,7&quot; für realistische Nutzungsszenarien&#10;&#10;**Software:**&#10;- Budget-Tracker-App (aktuelle Entwicklungsversion)&#10;- Bildschirmaufzeichnung für Analyse&#10;- Stopuhr für Zeitmessung&#10;&#10;**Testmaterialien:**&#10;- Vorbereitete Beispiel-Ausgaben und -Beträge&#10;- Persona-Karten für Rollenzuweisung&#10;- Bewertungsbögen für quantitative Metriken&#10;- Post-Test-Fragebogen für qualitatives Feedback&#10;&#10;---&#10;&#10;### **Zeitplan**&#10;&#10;- **Vorbereitung:** 28. August 2025 – Finale Testszenarien definieren, Teilnehmer rekrutieren&#10;- **Pilot-Test:** 29. August 2025 – Testdurchlauf mit einer Persona zur Kalibrierung&#10;- **Haupttests:** 30. August – 02. September 2025 (2-3 Tests pro Tag)&#10;- **Experten-Evaluation:** 03. September 2025 – Heuristische Analyse aller Screens&#10;- **Datenauswertung:** 04.–05. September 2025 – Quantitative und qualitative Analyse&#10;- **Erstellung des Ergebnisberichts:** 06.–07. September 2025&#10;- **Präsentation der Findings:** 08. September 2025&#10;&#10;---&#10;&#10;### **Datensammlung und Metriken**&#10;&#10;**Während des Tests erfasste Daten:**&#10;- **Bildschirmaufzeichnungen** aller Interaktionen&#10;- **Zeitstempel** für jeden Aufgabenschritt&#10;- **Fehlerprotokoll** mit Klassifizierung (Navigation, Eingabe, Verständnis)&#10;- **Think-Aloud-Kommentare** für qualitative Insights&#10;- **Biometrische Daten** (optional): Blickverfolgung für Dashboard-Analyse&#10;&#10;**Post-Test-Befragung:**&#10;- **System Usability Scale (SUS)** für standardisierte Bewertung&#10;- **Persona-spezifische Fragen** zu Budgetmanagement-Gewohnheiten&#10;- **Feature-Präferenz-Ranking** (Dashboard vs. Liste vs. Filter)&#10;- **Verbesserungsvorschläge** für kritische Usability-Probleme&#10;&#10;---&#10;&#10;### **Erwartete Ergebnisse und Erfolgskriterien**&#10;&#10;**Minimalziele (Must-Have):**&#10;- &gt;85% Task Completion Rate für Grundfunktionen (Aufgaben 1-3)&#10;- &lt;30 Sekunden für Ausgabenerfassung bei erfahrenen Nutzern&#10;- &gt;4.0 SUS-Score (Akzeptable Usability)&#10;&#10;**Zielwerte (Should-Have):**&#10;- &gt;90% Task Completion Rate für alle Aufgaben&#10;- &lt;15 Sekunden für Schnellkategorisierung via Chips&#10;- &gt;4.5 SUS-Score (Gute Usability)&#10;&#10;**Optimale Ergebnisse (Nice-to-Have):**&#10;- &gt;95% Task Completion Rate bei allen Benutzergruppen&#10;- Intuitive Kreisdiagramm-Interpretation ohne Erklärung&#10;- &gt;5.0 SUS-Score (Exzellente Usability)&#10;&#10;---&#10;&#10;### **Zusammenfassung**&#10;&#10;Dieser Testplan dokumentiert Ziel, Ablauf und Struktur eines nutzerzentrierten Usability-Tests, der systematisch an der Android-App „Budget Tracker&quot; durchgeführt wird. Basierend auf methodisch fundierten Personas, Ist-/Soll-Szenarien und Nutzungsanforderungen ermöglicht die Evaluation sowohl quantitative Messungen (Completion Rate, Time-on-Task) als auch qualitative Erkenntnisse (Satisfaction, Learnability).&#10;&#10;Die Kombination aus strukturierten Aufgabenmodellen und realitätsnahen Finanzszenarien gewährleistet aussagekräftige Ergebnisse für die Optimierung der Benutzerfreundlichkeit. Trotz möglicher Einzeltests basiert die Evaluation methodisch auf etablierten HCI-Prinzipien (Human-Centered Design, Nielsen-Heuristiken, Material Design Guidelines) und ermöglicht fundierte Aussagen über Nutzungsbarrieren und Verbesserungspotenziale im Bereich Mobile Financial Management.&#10;&#10;Der Test fokussiert dabei besonders auf die kritischen Erfolgsfaktoren einer Budget-App: Schnelle Eingabe, intuitive Visualisierung, effektive Kategorisierung und accessibility-freundliche Bedienbarkeit für diverse Altersgruppen und Technik-Affinitätslevel.&#10;&#10;---&#10;&#10;**Erstellt für:** Budget-Tracker Android App (Material Design 3)&#10;**Basierend auf:** Methodische 5-teilige Dokumentationssuite&#10;**Testleitung:** Karim Abdulhadi&#10;**Datum:** August 2025&#10;" />
              <option name="updatedContent" value="# Usability-Testplan für Budget-Tracker-App&#10;## Methodische Selbst-Evaluation der Benutzerfreundlichkeit&#10;&#10;---&#10;&#10;### **Zweck des Usability-Tests**&#10;&#10;Ziel des Tests ist es, die Benutzerfreundlichkeit der Android-App „Budget Tracker&quot; zu evaluieren. Es sollen Stärken und Schwächen hinsichtlich der Bedienbarkeit, Verständlichkeit der Budgetvisualisierung und Effizienz der Ausgabenerfassung identifiziert werden, um Verbesserungsmöglichkeiten aufzuzeigen und die Nutzererfahrung für verschiedene Finanzmanagement-Bedürfnisse zu optimieren.&#10;&#10;**Spezifische Testziele:**&#10;- Bewertung der Intuitivität des Kreisdiagramm-Dashboards&#10;- Evaluation der Effizienz der Ausgabenerfassung mit Schnellauswahl-Kategorien&#10;- Analyse der Verständlichkeit von Filter- und Analysefunktionen&#10;- Prüfung der Accessibility für verschiedene Altersgruppen (simuliert durch Persona-basierte Evaluation)&#10;- Bewertung der Dark Mode-Implementierung und Personalisierungsoptionen&#10;&#10;---&#10;&#10;### **Benutzergruppen und Testansatz**&#10;&#10;**Primäre Benutzergruppen (Persona-basierte Selbstevaluation):**&#10;- **Sparsame Berufseinsteiger** (Lisa-Typ): Digital Natives mit Sparbedürfnissen&#10;- **Budget-bewusste Familienväter** (Michael-Typ): Pragmatische Nutzer mit Analysebedarf&#10;- **Technikaffine Studenten** (Tom-Typ): Power-User mit knappem Budget&#10;&#10;**Sekundäre Benutzergruppen:**&#10;- **Ältere Benutzer/Rentner** (Ingrid-Typ): Accessibility-orientierte Nutzer&#10;- **Vielbeschäftigte Selbstständige** (Sarah-Typ): Effizienz-fokussierte Mobile-First-Nutzer&#10;- **Internationale Studenten** (David-Typ): Budget-kritische Nutzer mit Sprachbarrieren&#10;&#10;**Testansatz:** 1 Experte (Karim Abdulhadi) führt systematische Selbstevaluation durch, indem er sich in die verschiedenen Persona-Rollen versetzt und deren spezifische Bedürfnisse und Verhaltensweisen simuliert.&#10;&#10;---&#10;&#10;### **Testdauer**&#10;&#10;**Ungefähre Dauer je Persona-Durchlauf:** 15–20 Minuten&#10;&#10;**Einzelne Testblöcke:**&#10;- **Persona-Einführung und Rollensimulation:** 3 Minuten&#10;- **Grundfunktionen-Test** (Aufgaben 1-3): 8-10 Minuten&#10;- **Erweiterte Funktionen-Test** (Aufgaben 4-6): 6-8 Minuten  &#10;- **Persona-spezifische Bewertung und Notizen:** 3 Minuten&#10;&#10;**Gesamtdauer pro Persona:** ca. 20–24 Minuten&#10;&#10;**Gesamtdauer für alle 6 Personas:** ca. 2-2.5 Stunden&#10;&#10;**Zusätzliche Experten-Evaluation:** 30 Minuten für heuristische Gesamtanalyse&#10;&#10;**Total:** ca. 3 Stunden&#10;&#10;---&#10;&#10;### **Team**&#10;&#10;- **Testdurchführung, Moderation und Protokollierung:** Karim Abdulhadi (App-Entwickler)&#10;- **Persona-Simulation:** Karim Abdulhadi (wechselt zwischen verschiedenen Benutzerrollen)&#10;- **Technische Unterstützung:** Karim Abdulhadi (bei App-Problemen)&#10;- **Auswertung und Analyse:** Karim Abdulhadi&#10;&#10;**Selbsttest-Methodik:**&#10;- **Persona-Karten:** Detaillierte Profile vor jedem Test durchlesen&#10;- **Think-Aloud:** Gedanken und Reaktionen laut aussprechen und aufzeichnen&#10;- **Rollenwechsel:** Bewusst zwischen verschiedenen Nutzertypen und deren Denkweisen wechseln&#10;&#10;---&#10;&#10;### **Testmethodik**&#10;&#10;- **Art des Tests:** Experten-basierter Usability-Test mit Persona-Simulation und realistischen Finanzszenarien&#10;&#10;**Dokumentationsgrundlage:**&#10;- [**Aufgabenmodelle für Budget-Tracker-App**](./Aufgabenmodelle_Budget_Tracker_App.md)&#10;- [**Personas für Budget-Tracker-App**](./Personas_Budget_Tracker_App.md)  &#10;- [**Ist-Szenarien für Budget-Tracker-App**](./Ist_Szenarien_Budget_Tracker_App.md)&#10;- [**Soll-Szenarien für Budget-Tracker-App**](./Soll_Szenarien_Budget_Tracker_App.md)&#10;- [**Nutzungsanforderungen für Budget-Tracker-App**](./Nutzungsanforderungen_Budget_Tracker_App.md)&#10;&#10;**Evaluationsmethode:** &#10;- **Persona-basierte Heuristische Evaluation:** Systematisches Durchlaufen aller Aufgaben aus Sicht jeder Persona&#10;- **Cognitive Walkthrough:** Simulation der Denkprozesse verschiedener Benutzertypen&#10;- **Think-Aloud-Protokoll:** Selbst-Verbalisierung während der Aufgabenbearbeitung&#10;- **Heuristische Evaluation** basierend auf Material Design 3 Guidelines und Nielsen-Usability-Heuristiken&#10;&#10;**Persona-spezifische Bewertungskriterien:**&#10;&#10;**Quantitative Selbstbewertung:**&#10;- **Task Completion:** Kann die Persona diese Aufgabe erfolgreich abschließen?&#10;- **Intuitive Navigation:** Wie viele Klicks/Schritte sind nötig vs. optimal?&#10;- **Fehlerwahrscheinlichkeit:** Wo würde diese Persona wahrscheinlich Fehler machen?&#10;- **Lernkurve:** Wie schnell würde diese Persona die Funktion verstehen?&#10;&#10;**Qualitative Bewertung pro Persona:**&#10;- **Lisa (Berufseinsteigerin):** Ist die Schnellauswahl intuitiv? Versteht sie das Kreisdiagramm sofort?&#10;- **Michael (Familienvater):** Kann er effizient zwischen Kategorien wechseln? Sind die Filter klar?&#10;- **Tom (Student):** Findet er alle erweiterten Features? Ist Dark Mode gut umgesetzt?&#10;- **Ingrid (Rentnerin):** Ist die Schrift groß genug? Sind die Buttons eindeutig beschriftet?&#10;- **Sarah (Selbstständige):** Kann sie in unter 10 Sekunden eine Ausgabe erfassen?&#10;- **David (Austauschstudent):** Sind die wichtigsten Infos auch ohne perfekte Sprachkenntnisse verständlich?&#10;&#10;---&#10;&#10;### **Testszenarien und Aufgaben**&#10;&#10;**Persona-basierte Testdurchführung:**&#10;&#10;Für jede Persona wird folgender Ablauf durchlaufen:&#10;&#10;**1. Persona-Einstimmung (3 Min.):**&#10;- Persona-Profil und Kontext durchlesen&#10;- Mental in die Rolle versetzen (Alter, Einkommen, Ziele, Frustrationen)&#10;- Typische Nutzungssituation visualisieren&#10;&#10;**2. Grundfunktionen-Tests (8-10 Min.):**&#10;- **Aufgabe 1:** Erste Ausgabe erfassen (aus Persona-Perspektive)&#10;- **Aufgabe 2:** Schnelle Kategorisierung mit Schnellauswahl&#10;- **Aufgabe 3:** Dashboard verstehen und Budget-Status interpretieren&#10;&#10;**3. Erweiterte Funktionen (6-8 Min.):**&#10;- **Aufgabe 4:** Ausgaben filtern und analysieren  &#10;- **Aufgabe 5:** Einstellungen anpassen (Budget, Dark Mode)&#10;- **Aufgabe 6:** Mit Budgetüberschreitung umgehen&#10;&#10;**4. Persona-spezifische Bewertung (3 Min.):**&#10;- Kritische Punkte aus Persona-Sicht notieren&#10;- Verbesserungsvorschläge für diese Zielgruppe&#10;- Zufriedenheit auf Skala 1-10 bewerten&#10;&#10;---&#10;&#10;### **Testumgebung und Materialien**&#10;&#10;**Hardware:**&#10;- **Primärgerät:** Haupttest-Smartphone (Android 11+)&#10;- **Sekundärgerät:** Tablet für größere Bildschirm-Tests&#10;- **Accessibility-Test:** Gerät mit vergrößerter Schrift (für Ingrid-Persona)&#10;&#10;**Software:**&#10;- Budget-Tracker-App (aktuelle Entwicklungsversion)&#10;- Bildschirmaufzeichnung für spätere Analyse&#10;- Timer für Zeitmessung pro Aufgabe&#10;- Notiz-App für Persona-spezifische Beobachtungen&#10;&#10;**Testmaterialien:**&#10;- **Persona-Karten:** Ausgedruckte Profile aller 6 Personas&#10;- **Szenario-Kärtchen:** Realistische Ausgaben-Beispiele pro Persona&#10;- **Bewertungsbogen:** Strukturierte Tabelle für quantitative Bewertungen&#10;- **Audio-Aufzeichnung:** Für Think-Aloud-Protokoll&#10;&#10;---&#10;&#10;### **Zeitplan**&#10;&#10;- **Vorbereitung:** 30. August 2025 (Heute) – Testmaterialien vorbereiten, Persona-Kärtchen ausdrucken&#10;- **Pilottest:** 30. August 2025 (Nachmittag) – Ein Persona-Durchlauf zur Kalibrierung (Lisa oder Tom)&#10;- **Hauptevaluation:** 31. August 2025 – Alle 6 Personas systematisch durchlaufen (2-2.5 Std.)&#10;- **Heuristische Expertenanalyse:** 31. August 2025 – Übergeordnete UI/UX-Evaluation (30 Min.)&#10;- **Auswertung und Dokumentation:** 01. September 2025&#10;- **Erstellung des Ergebnisberichts:** 02. September 2025&#10;&#10;---&#10;&#10;### **Selbsttest-Datensammlung**&#10;&#10;**Während des Tests dokumentierte Daten:**&#10;- **Audio-Aufzeichnung** des Think-Aloud-Protokolls für jede Persona&#10;- **Bildschirmaufzeichnung** kritischer Interaktionsschritte&#10;- **Zeitstempel** für jeden Aufgabenschritt pro Persona&#10;- **Persona-spezifisches Fehlerprotokoll** mit Klassifizierung&#10;- **Sofortige Notizen** zu Usability-Problemen aus jeweiliger Persona-Sicht&#10;&#10;**Strukturierte Bewertungsmatrix:**&#10;```&#10;| Persona | Aufgabe | Erfolgreich? | Zeit (Sek.) | Fehler | Zufriedenheit (1-10) | Kritische Punkte |&#10;|---------|---------|--------------|-------------|--------|---------------------|------------------|&#10;| Lisa    | 1-6     | Ja/Nein      | XX          | XX     | X                   | ...              |&#10;| Michael | 1-6     | Ja/Nein      | XX          | XX     | X                   | ...              |&#10;| etc.    |         |              |             |        |                     |                  |&#10;```&#10;&#10;**Post-Test Selbstreflexion:**&#10;- **Gesamteindruck** pro Persona auf SUS-Skala (System Usability Scale)&#10;- **Kritischste Usability-Probleme** identifizieren&#10;- **Persona-spezifische Verbesserungsvorschläge** entwickeln&#10;- **Priorisierung** der gefundenen Issues nach Schweregrad&#10;&#10;---&#10;&#10;### **Erwartete Ergebnisse und Erfolgskriterien**&#10;&#10;**Selbsttest-spezifische Ziele:**&#10;&#10;**Minimalziele (Must-Have):**&#10;- Alle 6 Personas können Grundfunktionen (Aufgaben 1-3) erfolgreich abschließen&#10;- Identifikation von mindestens 5 konkreten Verbesserungspunkten&#10;- Klare Priorisierung der kritischsten Usability-Issues&#10;&#10;**Zielwerte (Should-Have):**&#10;- 90% Erfolgsrate bei allen Aufgaben über alle Personas hinweg&#10;- Spezifische Optimierungsvorschläge für jede Zielgruppe&#10;- Detaillierte Accessibility-Bewertung für Ingrid-Persona&#10;&#10;**Optimale Ergebnisse (Nice-to-Have):**&#10;- Umfassender Usability-Report mit konkreten UI-Verbesserungen&#10;- Roadmap für nächste Entwicklungsiterations&#10;- Validierung der Persona-Modelle durch realitätsnahe Simulation&#10;&#10;---&#10;&#10;### **Zusammenfassung**&#10;&#10;Dieser Testplan dokumentiert eine systematische Selbstevaluation der Budget-Tracker-App durch den Entwickler. Durch die methodische Simulation verschiedener Personas und deren spezifischer Bedürfnisse ermöglicht der Test fundierte Aussagen über Usability-Probleme und Verbesserungspotenziale.&#10;&#10;Die Einzeltest-Methodik basiert auf etablierten UX-Prinzipien (Persona-basierte Evaluation, Cognitive Walkthroughs, Heuristische Analyse) und gewährleistet trotz fehlender externen Testpersonen eine objektive und systematische Bewertung der Benutzerfreundlichkeit.&#10;&#10;Der Fokus liegt auf der praktischen Identifikation von Optimierungsmöglichkeiten für die verschiedenen Zielgruppen der Budget-App, von technikaffinen Studenten bis hin zu accessibility-orientierten älteren Nutzern.&#10;&#10;**Besondere Stärken des Einzeltest-Ansatzes:**&#10;- **Entwickler-Expertise:** Tiefes Verständnis der technischen Implementierung&#10;- **Flexibilität:** Sofortige Anpassungen und Verbesserungen möglich  &#10;- **Effizienz:** Kompakte 3-Stunden-Evaluation mit umfassenden Ergebnissen&#10;- **Persona-Fokus:** Systematische Berücksichtigung aller Zielgruppen-Bedürfnisse&#10;&#10;---&#10;&#10;**Erstellt für:** Budget-Tracker Android App (Material Design 3)&#10;**Basierend auf:** Methodische 5-teilige Dokumentationssuite&#10;**Testdurchführung:** Karim Abdulhadi (Selbstevaluation)&#10;**Datum:** 30. August 2025" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/myapplication/ui/screens/AddExpenseScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/myapplication/ui/screens/AddExpenseScreen.kt" />
              <option name="originalContent" value="package com.example.myapplication.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import com.example.myapplication.data.ExpenseCategory&#10;import com.example.myapplication.viewmodel.BudgetViewModel&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AddExpenseScreen(viewModel: BudgetViewModel) {&#10;    val amount by viewModel.addExpenseAmount.collectAsState()&#10;    val category by viewModel.addExpenseCategory.collectAsState()&#10;    val note by viewModel.addExpenseNote.collectAsState()&#10;    val date by viewModel.addExpenseDate.collectAsState()&#10;&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showCategoryDropdown by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Ausgabe hinzufügen&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(20.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Amount input&#10;                OutlinedTextField(&#10;                    value = amount,&#10;                    onValueChange = viewModel::updateAddExpenseAmount,&#10;                    label = { Text(&quot;Betrag&quot;) },&#10;                    suffix = { Text(&quot;€&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    singleLine = true&#10;                )&#10;&#10;                // Category dropdown&#10;                ExposedDropdownMenuBox(&#10;                    expanded = showCategoryDropdown,&#10;                    onExpandedChange = { showCategoryDropdown = it },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = &quot;${category.emoji} ${category.displayName}&quot;,&#10;                        onValueChange = { },&#10;                        readOnly = true,&#10;                        label = { Text(&quot;Kategorie&quot;) },&#10;                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = showCategoryDropdown) },&#10;                        modifier = Modifier&#10;                            .menuAnchor()&#10;                            .fillMaxWidth()&#10;                    )&#10;&#10;                    ExposedDropdownMenu(&#10;                        expanded = showCategoryDropdown,&#10;                        onDismissRequest = { showCategoryDropdown = false }&#10;                    ) {&#10;                        ExpenseCategory.values().forEach { categoryOption -&gt;&#10;                            DropdownMenuItem(&#10;                                text = {&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = categoryOption.emoji,&#10;                                            modifier = Modifier.padding(end = 8.dp)&#10;                                        )&#10;                                        Text(text = categoryOption.displayName)&#10;                                    }&#10;                                },&#10;                                onClick = {&#10;                                    viewModel.updateAddExpenseCategory(categoryOption)&#10;                                    showCategoryDropdown = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Date picker&#10;                OutlinedTextField(&#10;                    value = date.format(DateTimeFormatter.ofPattern(&quot;dd.MM.yyyy&quot;)),&#10;                    onValueChange = { },&#10;                    label = { Text(&quot;Datum&quot;) },&#10;                    readOnly = true,&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { showDatePicker = true }) {&#10;                            Icon(Icons.Filled.DateRange, contentDescription = &quot;Datum auswählen&quot;)&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                // Note input&#10;                OutlinedTextField(&#10;                    value = note,&#10;                    onValueChange = viewModel::updateAddExpenseNote,&#10;                    label = { Text(&quot;Notiz (optional)&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    maxLines = 3&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Add button&#10;                Button(&#10;                    onClick = {&#10;                        viewModel.addExpense()&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    enabled = amount.toDoubleOrNull() != null &amp;&amp; amount.toDoubleOrNull()!! &gt; 0&#10;                ) {&#10;                    Text(&quot;Ausgabe hinzufügen&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Recent categories card for quick selection&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Schnellauswahl Kategorien&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 12.dp)&#10;                )&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    listOf(&#10;                        ExpenseCategory.FOOD,&#10;                        ExpenseCategory.TRANSPORT,&#10;                        ExpenseCategory.ENTERTAINMENT,&#10;                        ExpenseCategory.SHOPPING&#10;                    ).forEach { quickCategory -&gt;&#10;                        FilterChip(&#10;                            onClick = { viewModel.updateAddExpenseCategory(quickCategory) },&#10;                            label = {&#10;                                Text(&#10;                                    text = &quot;${quickCategory.emoji} ${quickCategory.displayName}&quot;,&#10;                                    maxLines = 1&#10;                                )&#10;                            },&#10;                            selected = category == quickCategory,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showDatePicker) {&#10;        val datePickerState = rememberDatePickerState(&#10;            initialSelectedDateMillis = java.time.ZoneOffset.UTC.let {&#10;                date.atStartOfDay().toInstant(it).toEpochMilli()&#10;            }&#10;        )&#10;&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                            val selectedDate = java.time.Instant.ofEpochMilli(millis)&#10;                                .atZone(java.time.ZoneId.systemDefault())&#10;                                .toLocalDate()&#10;                            viewModel.updateAddExpenseDate(selectedDate)&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Abbrechen&quot;)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.myapplication.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import com.example.myapplication.data.ExpenseCategory&#10;import com.example.myapplication.viewmodel.BudgetViewModel&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AddExpenseScreen(viewModel: BudgetViewModel) {&#10;    val amount by viewModel.addExpenseAmount.collectAsState()&#10;    val category by viewModel.addExpenseCategory.collectAsState()&#10;    val note by viewModel.addExpenseNote.collectAsState()&#10;    val date by viewModel.addExpenseDate.collectAsState()&#10;&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showCategoryDropdown by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Ausgabe hinzufügen&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(20.dp),&#10;                verticalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Amount input&#10;                OutlinedTextField(&#10;                    value = amount,&#10;                    onValueChange = viewModel::updateAddExpenseAmount,&#10;                    label = { Text(&quot;Betrag&quot;) },&#10;                    suffix = { Text(&quot;€&quot;) },&#10;                    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Decimal),&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    singleLine = true&#10;                )&#10;&#10;                // Category dropdown&#10;                ExposedDropdownMenuBox(&#10;                    expanded = showCategoryDropdown,&#10;                    onExpandedChange = { showCategoryDropdown = it },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    OutlinedTextField(&#10;                        value = &quot;${category.emoji} ${category.displayName}&quot;,&#10;                        onValueChange = { },&#10;                        readOnly = true,&#10;                        label = { Text(&quot;Kategorie&quot;) },&#10;                        trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = showCategoryDropdown) },&#10;                        modifier = Modifier&#10;                            .menuAnchor()&#10;                            .fillMaxWidth()&#10;                    )&#10;&#10;                    ExposedDropdownMenu(&#10;                        expanded = showCategoryDropdown,&#10;                        onDismissRequest = { showCategoryDropdown = false }&#10;                    ) {&#10;                        ExpenseCategory.values().forEach { categoryOption -&gt;&#10;                            DropdownMenuItem(&#10;                                text = {&#10;                                    Row(&#10;                                        verticalAlignment = Alignment.CenterVertically&#10;                                    ) {&#10;                                        Text(&#10;                                            text = categoryOption.emoji,&#10;                                            modifier = Modifier.padding(end = 8.dp)&#10;                                        )&#10;                                        Text(text = categoryOption.displayName)&#10;                                    }&#10;                                },&#10;                                onClick = {&#10;                                    viewModel.updateAddExpenseCategory(categoryOption)&#10;                                    showCategoryDropdown = false&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Date picker&#10;                OutlinedTextField(&#10;                    value = date.format(DateTimeFormatter.ofPattern(&quot;dd.MM.yyyy&quot;)),&#10;                    onValueChange = { },&#10;                    label = { Text(&quot;Datum&quot;) },&#10;                    readOnly = true,&#10;                    trailingIcon = {&#10;                        IconButton(onClick = { showDatePicker = true }) {&#10;                            Icon(Icons.Filled.DateRange, contentDescription = &quot;Datum auswählen&quot;)&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                // Note input&#10;                OutlinedTextField(&#10;                    value = note,&#10;                    onValueChange = viewModel::updateAddExpenseNote,&#10;                    label = { Text(&quot;Notiz (optional)&quot;) },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    maxLines = 3&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Add button&#10;                Button(&#10;                    onClick = {&#10;                        viewModel.addExpense()&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    enabled = amount.toDoubleOrNull() != null &amp;&amp; amount.toDoubleOrNull()!! &gt; 0&#10;                ) {&#10;                    Text(&quot;Ausgabe hinzufügen&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        // Recent categories card for quick selection&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Schnellauswahl Kategorien&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 12.dp)&#10;                )&#10;                &#10;                // Erste Zeile mit 2 Kategorien&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    listOf(&#10;                        ExpenseCategory.FOOD,&#10;                        ExpenseCategory.TRANSPORT&#10;                    ).forEach { quickCategory -&gt;&#10;                        FilterChip(&#10;                            onClick = { viewModel.updateAddExpenseCategory(quickCategory) },&#10;                            label = {&#10;                                Text(&#10;                                    text = &quot;${quickCategory.emoji} ${quickCategory.displayName}&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            },&#10;                            selected = category == quickCategory,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                &#10;                // Zweite Zeile mit 2 Kategorien&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    listOf(&#10;                        ExpenseCategory.ENTERTAINMENT,&#10;                        ExpenseCategory.SHOPPING&#10;                    ).forEach { quickCategory -&gt;&#10;                        FilterChip(&#10;                            onClick = { viewModel.updateAddExpenseCategory(quickCategory) },&#10;                            label = {&#10;                                Text(&#10;                                    text = &quot;${quickCategory.emoji} ${quickCategory.displayName}&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium&#10;                                )&#10;                            },&#10;                            selected = category == quickCategory,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showDatePicker) {&#10;        val datePickerState = rememberDatePickerState(&#10;            initialSelectedDateMillis = java.time.ZoneOffset.UTC.let {&#10;                date.atStartOfDay().toInstant(it).toEpochMilli()&#10;            }&#10;        )&#10;&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let { millis -&gt;&#10;                            val selectedDate = java.time.Instant.ofEpochMilli(millis)&#10;                                .atZone(java.time.ZoneId.systemDefault())&#10;                                .toLocalDate()&#10;                            viewModel.updateAddExpenseDate(selectedDate)&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Abbrechen&quot;)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/myapplication/ui/screens/DashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/myapplication/ui/screens/DashboardScreen.kt" />
              <option name="originalContent" value="package com.example.myapplication.ui.screens&#10;&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.TrendingDown&#10;import androidx.compose.material.icons.filled.TrendingUp&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.geometry.center&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.StrokeCap&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.myapplication.data.Expense&#10;import com.example.myapplication.ui.theme.Green500&#10;import com.example.myapplication.ui.theme.Red500&#10;import com.example.myapplication.viewmodel.BudgetViewModel&#10;import java.time.format.DateTimeFormatter&#10;import kotlin.math.min&#10;&#10;@Composable&#10;fun DashboardScreen(viewModel: BudgetViewModel) {&#10;    val dashboardState by viewModel.dashboardState.collectAsState()&#10;&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        item {&#10;            Text(&#10;                text = &quot;Budget Übersicht&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;        }&#10;&#10;        item {&#10;            BudgetProgressCard(&#10;                totalBudget = dashboardState.totalBudget,&#10;                totalSpent = dashboardState.totalSpent,&#10;                currency = dashboardState.currency,&#10;                spentPercentage = dashboardState.spentPercentage&#10;            )&#10;        }&#10;&#10;        item {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                InfoCard(&#10;                    title = &quot;Verfügbar&quot;,&#10;                    amount = dashboardState.remainingBudget,&#10;                    currency = dashboardState.currency,&#10;                    icon = Icons.Filled.TrendingUp,&#10;                    color = if (dashboardState.remainingBudget &gt;= 0) Green500 else Red500,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                InfoCard(&#10;                    title = &quot;Ausgegeben&quot;,&#10;                    amount = dashboardState.totalSpent,&#10;                    currency = dashboardState.currency,&#10;                    icon = Icons.Filled.TrendingDown,&#10;                    color = Red500,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Letzte Ausgaben&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    if (dashboardState.monthlyExpenses.isEmpty()) {&#10;                        Text(&#10;                            text = &quot;Noch keine Ausgaben in diesem Monat&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 16.dp)&#10;                        )&#10;                    } else {&#10;                        dashboardState.monthlyExpenses&#10;                            .sortedByDescending { it.date }&#10;                            .take(5)&#10;                            .forEach { expense -&gt;&#10;                                ExpenseItem(expense = expense, currency = dashboardState.currency)&#10;                            }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BudgetProgressCard(&#10;    totalBudget: Double,&#10;    totalSpent: Double,&#10;    currency: String,&#10;    spentPercentage: Double&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Monatsbudget&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            Box(&#10;                contentAlignment = Alignment.Center,&#10;                modifier = Modifier.size(180.dp)&#10;            ) {&#10;                Canvas(modifier = Modifier.fillMaxSize()) {&#10;                    val strokeWidth = 20.dp.toPx()&#10;                    val radius = (size.minDimension - strokeWidth) / 2&#10;                    val center = size.center&#10;&#10;                    // Background circle&#10;                    drawCircle(&#10;                        color = Color.Gray.copy(alpha = 0.3f),&#10;                        radius = radius,&#10;                        center = center,&#10;                        style = Stroke(width = strokeWidth, cap = StrokeCap.Round)&#10;                    )&#10;&#10;                    // Progress circle&#10;                    val sweepAngle = (spentPercentage * 360f).coerceAtMost(360f)&#10;                    drawArc(&#10;                        color = if (spentPercentage &gt; 0.8f) Red500 else if (spentPercentage &gt; 0.6f) Color(0xFFFF9800) else Green500,&#10;                        startAngle = -90f,&#10;                        sweepAngle = sweepAngle,&#10;                        useCenter = false,&#10;                        style = Stroke(width = strokeWidth, cap = StrokeCap.Round),&#10;                        size = androidx.compose.ui.geometry.Size(radius * 2, radius * 2),&#10;                        topLeft = androidx.compose.ui.geometry.Offset(&#10;                            center.x - radius,&#10;                            center.y - radius&#10;                        )&#10;                    )&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = String.format(&quot;%.0f%s&quot;, totalSpent, currency),&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = &quot;von ${String.format(&quot;%.0f%s&quot;, totalBudget, currency)}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = &quot;${String.format(&quot;%.1f&quot;, spentPercentage * 100)}%&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InfoCard(&#10;    title: String,&#10;    amount: Double,&#10;    currency: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                tint = color,&#10;                modifier = Modifier.size(32.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;            Text(&#10;                text = String.format(&quot;%.2f%s&quot;, amount, currency),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = color&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ExpenseItem(&#10;    expense: Expense,&#10;    currency: String&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = expense.category.emoji,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(end = 12.dp)&#10;            )&#10;            Column {&#10;                Text(&#10;                    text = expense.category.displayName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = expense.date.format(DateTimeFormatter.ofPattern(&quot;dd.MM.yyyy&quot;)),&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;        Text(&#10;            text = &quot;-${String.format(&quot;%.2f&quot;, expense.amount)}$currency&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Red500&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.myapplication.ui.screens&#10;&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.TrendingDown&#10;import androidx.compose.material.icons.filled.TrendingUp&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.geometry.center&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.StrokeCap&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.myapplication.data.Expense&#10;import com.example.myapplication.ui.theme.Green500&#10;import com.example.myapplication.ui.theme.Red500&#10;import com.example.myapplication.viewmodel.BudgetViewModel&#10;import java.time.format.DateTimeFormatter&#10;import kotlin.math.min&#10;&#10;@Composable&#10;fun DashboardScreen(viewModel: BudgetViewModel) {&#10;    val dashboardState by viewModel.dashboardState.collectAsState()&#10;&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        item {&#10;            Text(&#10;                text = &quot;Budget Übersicht&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;        }&#10;&#10;        item {&#10;            BudgetProgressCard(&#10;                totalBudget = dashboardState.totalBudget,&#10;                totalSpent = dashboardState.totalSpent,&#10;                currency = dashboardState.currency,&#10;                spentPercentage = dashboardState.spentPercentage&#10;            )&#10;        }&#10;&#10;        item {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                InfoCard(&#10;                    title = &quot;Verfügbar&quot;,&#10;                    amount = dashboardState.remainingBudget,&#10;                    currency = dashboardState.currency,&#10;                    icon = Icons.Filled.TrendingUp,&#10;                    color = if (dashboardState.remainingBudget &gt;= 0) Green500 else Red500,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                InfoCard(&#10;                    title = &quot;Ausgegeben&quot;,&#10;                    amount = dashboardState.totalSpent,&#10;                    currency = dashboardState.currency,&#10;                    icon = Icons.Filled.TrendingDown,&#10;                    color = Red500,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Letzte Ausgaben&quot;,&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 12.dp)&#10;                    )&#10;&#10;                    if (dashboardState.monthlyExpenses.isEmpty()) {&#10;                        Text(&#10;                            text = &quot;Noch keine Ausgaben in diesem Monat&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 16.dp)&#10;                        )&#10;                    } else {&#10;                        dashboardState.monthlyExpenses&#10;                            .sortedByDescending { it.date }&#10;                            .take(5)&#10;                            .forEach { expense -&gt;&#10;                                ExpenseItem(expense = expense, currency = dashboardState.currency)&#10;                            }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun BudgetProgressCard(&#10;    totalBudget: Double,&#10;    totalSpent: Double,&#10;    currency: String,&#10;    spentPercentage: Double&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Monatsbudget&quot;,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            Box(&#10;                contentAlignment = Alignment.Center,&#10;                modifier = Modifier.size(180.dp)&#10;            ) {&#10;                Canvas(modifier = Modifier.fillMaxSize()) {&#10;                    val strokeWidth = 20.dp.toPx()&#10;                    val radius = (size.minDimension - strokeWidth) / 2&#10;                    val centerX = size.width / 2&#10;                    val centerY = size.height / 2&#10;&#10;                    // Background circle&#10;                    drawCircle(&#10;                        color = Color.Gray.copy(alpha = 0.3f),&#10;                        radius = radius,&#10;                        center = androidx.compose.ui.geometry.Offset(centerX, centerY),&#10;                        style = Stroke(width = strokeWidth, cap = StrokeCap.Round)&#10;                    )&#10;&#10;                    // Progress circle&#10;                    val sweepAngle = (spentPercentage * 360f).coerceAtMost(360f).toFloat()&#10;                    drawArc(&#10;                        color = if (spentPercentage &gt; 0.8f) Red500 else if (spentPercentage &gt; 0.6f) Color(0xFFFF9800) else Green500,&#10;                        startAngle = -90f,&#10;                        sweepAngle = sweepAngle,&#10;                        useCenter = false,&#10;                        style = Stroke(width = strokeWidth, cap = StrokeCap.Round),&#10;                        size = androidx.compose.ui.geometry.Size(radius * 2, radius * 2),&#10;                        topLeft = androidx.compose.ui.geometry.Offset(&#10;                            centerX - radius,&#10;                            centerY - radius&#10;                        )&#10;                    )&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = String.format(&quot;%.0f%s&quot;, totalSpent, currency),&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = &quot;von ${String.format(&quot;%.0f%s&quot;, totalBudget, currency)}&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = &quot;${String.format(&quot;%.1f&quot;, spentPercentage * 100)}%&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun InfoCard(&#10;    title: String,&#10;    amount: Double,&#10;    currency: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = null,&#10;                tint = color,&#10;                modifier = Modifier.size(32.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;            Text(&#10;                text = String.format(&quot;%.2f%s&quot;, amount, currency),&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = color&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ExpenseItem(&#10;    expense: Expense,&#10;    currency: String&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = expense.category.emoji,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(end = 12.dp)&#10;            )&#10;            Column {&#10;                Text(&#10;                    text = expense.category.displayName,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;                Text(&#10;                    text = expense.date.format(DateTimeFormatter.ofPattern(&quot;dd.MM.yyyy&quot;)),&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;        Text(&#10;            text = &quot;-${String.format(&quot;%.2f&quot;, expense.amount)}$currency&quot;,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Red500&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.1.4&quot;&#10;kotlin = &quot;1.9.10&quot;&#10;coreKtx = &quot;1.12.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.1.5&quot;&#10;espressoCore = &quot;3.5.1&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.10.0&quot;&#10;composeBom = &quot;2023.10.01&quot;&#10;composeActivity = &quot;1.8.1&quot;&#10;composeNavigation = &quot;2.7.4&quot;&#10;lifecycleRuntimeKtx = &quot;2.7.0&quot;&#10;lifecycleViewmodelCompose = &quot;2.7.0&quot;&#10;datastorePreferences = &quot;1.0.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;&#10;# Compose BOM&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;&#10;# Compose libraries&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;composeActivity&quot; }&#10;&#10;# Navigation&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;composeNavigation&quot; }&#10;&#10;# Lifecycle&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycleViewmodelCompose&quot; }&#10;&#10;# DataStore&#10;androidx-datastore-preferences = { group = &quot;androidx.datastore&quot;, name = &quot;datastore-preferences&quot;, version.ref = &quot;datastorePreferences&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.1.4&quot;&#10;kotlin = &quot;1.9.20&quot;&#10;coreKtx = &quot;1.12.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.1.5&quot;&#10;espressoCore = &quot;3.5.1&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.10.0&quot;&#10;composeBom = &quot;2023.10.01&quot;&#10;composeActivity = &quot;1.8.1&quot;&#10;composeNavigation = &quot;2.7.4&quot;&#10;lifecycleRuntimeKtx = &quot;2.7.0&quot;&#10;lifecycleViewmodelCompose = &quot;2.7.0&quot;&#10;datastorePreferences = &quot;1.0.0&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;&#10;# Compose BOM&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;&#10;# Compose libraries&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;composeActivity&quot; }&#10;&#10;# Navigation&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;composeNavigation&quot; }&#10;&#10;# Lifecycle&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycleViewmodelCompose&quot; }&#10;&#10;# DataStore&#10;androidx-datastore-preferences = { group = &quot;androidx.datastore&quot;, name = &quot;datastore-preferences&quot;, version.ref = &quot;datastorePreferences&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>